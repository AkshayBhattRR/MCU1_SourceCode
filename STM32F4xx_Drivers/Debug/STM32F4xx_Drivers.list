
STM32F4xx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002764  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08002914  08002914  00012914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a40  08002a40  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a40  08002a40  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a40  08002a40  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a40  08002a40  00012a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a44  08002a44  00012a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08002a48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000500  2000008c  08002ad4  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000058c  08002ad4  0002058c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000027c5  00000000  00000000  000200b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007b9  00000000  00000000  0002287b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001b8  00000000  00000000  00023038  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000160  00000000  00000000  000231f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003176  00000000  00000000  00023350  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001ff0  00000000  00000000  000264c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b8a9  00000000  00000000  000284b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00033d5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010a8  00000000  00000000  00033ddc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080028fc 	.word	0x080028fc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000090 	.word	0x20000090
 80001ec:	080028fc 	.word	0x080028fc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <GPIO_PeriClockControl>:
 *
 * @return			- none
 *
 * @note			- For generic macros refer to MCU specific header file
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	460b      	mov	r3, r1
 80002aa:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 80002ac:	78fb      	ldrb	r3, [r7, #3]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d162      	bne.n	8000378 <GPIO_PeriClockControl+0xd8>
		if (pGPIOx == GPIOA) {
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4a64      	ldr	r2, [pc, #400]	; (8000448 <GPIO_PeriClockControl+0x1a8>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d106      	bne.n	80002c8 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80002ba:	4b64      	ldr	r3, [pc, #400]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 80002bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002be:	4a63      	ldr	r2, [pc, #396]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 80002c0:	f043 0301 	orr.w	r3, r3, #1
 80002c4:	6313      	str	r3, [r2, #48]	; 0x30
		} else if (pGPIOx == GPIOI) {
			GPIOI_PCLK_DI();
		}
	}

}
 80002c6:	e0b9      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB) {
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	4a61      	ldr	r2, [pc, #388]	; (8000450 <GPIO_PeriClockControl+0x1b0>)
 80002cc:	4293      	cmp	r3, r2
 80002ce:	d106      	bne.n	80002de <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80002d0:	4b5e      	ldr	r3, [pc, #376]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 80002d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d4:	4a5d      	ldr	r2, [pc, #372]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 80002d6:	f043 0302 	orr.w	r3, r3, #2
 80002da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002dc:	e0ae      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC) {
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	4a5c      	ldr	r2, [pc, #368]	; (8000454 <GPIO_PeriClockControl+0x1b4>)
 80002e2:	4293      	cmp	r3, r2
 80002e4:	d106      	bne.n	80002f4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80002e6:	4b59      	ldr	r3, [pc, #356]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 80002e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ea:	4a58      	ldr	r2, [pc, #352]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 80002ec:	f043 0304 	orr.w	r3, r3, #4
 80002f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f2:	e0a3      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD) {
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4a58      	ldr	r2, [pc, #352]	; (8000458 <GPIO_PeriClockControl+0x1b8>)
 80002f8:	4293      	cmp	r3, r2
 80002fa:	d106      	bne.n	800030a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80002fc:	4b53      	ldr	r3, [pc, #332]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 80002fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000300:	4a52      	ldr	r2, [pc, #328]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 8000302:	f043 0308 	orr.w	r3, r3, #8
 8000306:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000308:	e098      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE) {
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4a53      	ldr	r2, [pc, #332]	; (800045c <GPIO_PeriClockControl+0x1bc>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d106      	bne.n	8000320 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000312:	4b4e      	ldr	r3, [pc, #312]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 8000314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000316:	4a4d      	ldr	r2, [pc, #308]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 8000318:	f043 0310 	orr.w	r3, r3, #16
 800031c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800031e:	e08d      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF) {
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	4a4f      	ldr	r2, [pc, #316]	; (8000460 <GPIO_PeriClockControl+0x1c0>)
 8000324:	4293      	cmp	r3, r2
 8000326:	d106      	bne.n	8000336 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000328:	4b48      	ldr	r3, [pc, #288]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 800032a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032c:	4a47      	ldr	r2, [pc, #284]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 800032e:	f043 0320 	orr.w	r3, r3, #32
 8000332:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000334:	e082      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG) {
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4a4a      	ldr	r2, [pc, #296]	; (8000464 <GPIO_PeriClockControl+0x1c4>)
 800033a:	4293      	cmp	r3, r2
 800033c:	d106      	bne.n	800034c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800033e:	4b43      	ldr	r3, [pc, #268]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 8000340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000342:	4a42      	ldr	r2, [pc, #264]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 8000344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000348:	6313      	str	r3, [r2, #48]	; 0x30
}
 800034a:	e077      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH) {
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4a46      	ldr	r2, [pc, #280]	; (8000468 <GPIO_PeriClockControl+0x1c8>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d106      	bne.n	8000362 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000354:	4b3d      	ldr	r3, [pc, #244]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 8000356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000358:	4a3c      	ldr	r2, [pc, #240]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 800035a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800035e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000360:	e06c      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI) {
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4a41      	ldr	r2, [pc, #260]	; (800046c <GPIO_PeriClockControl+0x1cc>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d168      	bne.n	800043c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800036a:	4b38      	ldr	r3, [pc, #224]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 800036c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036e:	4a37      	ldr	r2, [pc, #220]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 8000370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000374:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000376:	e061      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		if (pGPIOx == GPIOA) {
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4a33      	ldr	r2, [pc, #204]	; (8000448 <GPIO_PeriClockControl+0x1a8>)
 800037c:	4293      	cmp	r3, r2
 800037e:	d106      	bne.n	800038e <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000380:	4b32      	ldr	r3, [pc, #200]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 8000382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000384:	4a31      	ldr	r2, [pc, #196]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 8000386:	f023 0301 	bic.w	r3, r3, #1
 800038a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800038c:	e056      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB) {
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4a2f      	ldr	r2, [pc, #188]	; (8000450 <GPIO_PeriClockControl+0x1b0>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d106      	bne.n	80003a4 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000396:	4b2d      	ldr	r3, [pc, #180]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 8000398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039a:	4a2c      	ldr	r2, [pc, #176]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 800039c:	f023 0302 	bic.w	r3, r3, #2
 80003a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a2:	e04b      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC) {
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a2b      	ldr	r2, [pc, #172]	; (8000454 <GPIO_PeriClockControl+0x1b4>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d106      	bne.n	80003ba <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80003ac:	4b27      	ldr	r3, [pc, #156]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 80003ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b0:	4a26      	ldr	r2, [pc, #152]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 80003b2:	f023 0304 	bic.w	r3, r3, #4
 80003b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b8:	e040      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD) {
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4a26      	ldr	r2, [pc, #152]	; (8000458 <GPIO_PeriClockControl+0x1b8>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d106      	bne.n	80003d0 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 80003c2:	4b22      	ldr	r3, [pc, #136]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 80003c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c6:	4a21      	ldr	r2, [pc, #132]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 80003c8:	f023 0308 	bic.w	r3, r3, #8
 80003cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ce:	e035      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE) {
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a22      	ldr	r2, [pc, #136]	; (800045c <GPIO_PeriClockControl+0x1bc>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d106      	bne.n	80003e6 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 80003d8:	4b1c      	ldr	r3, [pc, #112]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 80003da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003dc:	4a1b      	ldr	r2, [pc, #108]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 80003de:	f023 0310 	bic.w	r3, r3, #16
 80003e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e4:	e02a      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF) {
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a1d      	ldr	r2, [pc, #116]	; (8000460 <GPIO_PeriClockControl+0x1c0>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d106      	bne.n	80003fc <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 80003ee:	4b17      	ldr	r3, [pc, #92]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 80003f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f2:	4a16      	ldr	r2, [pc, #88]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 80003f4:	f023 0320 	bic.w	r3, r3, #32
 80003f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fa:	e01f      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG) {
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4a19      	ldr	r2, [pc, #100]	; (8000464 <GPIO_PeriClockControl+0x1c4>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d106      	bne.n	8000412 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000404:	4b11      	ldr	r3, [pc, #68]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 8000406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000408:	4a10      	ldr	r2, [pc, #64]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 800040a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800040e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000410:	e014      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH) {
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a14      	ldr	r2, [pc, #80]	; (8000468 <GPIO_PeriClockControl+0x1c8>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d106      	bne.n	8000428 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 800041a:	4b0c      	ldr	r3, [pc, #48]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 800041c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041e:	4a0b      	ldr	r2, [pc, #44]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 8000420:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000424:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000426:	e009      	b.n	800043c <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI) {
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a10      	ldr	r2, [pc, #64]	; (800046c <GPIO_PeriClockControl+0x1cc>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d105      	bne.n	800043c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000430:	4b06      	ldr	r3, [pc, #24]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 8000432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000434:	4a05      	ldr	r2, [pc, #20]	; (800044c <GPIO_PeriClockControl+0x1ac>)
 8000436:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800043a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	40020000 	.word	0x40020000
 800044c:	40023800 	.word	0x40023800
 8000450:	40020400 	.word	0x40020400
 8000454:	40020800 	.word	0x40020800
 8000458:	40020c00 	.word	0x40020c00
 800045c:	40021000 	.word	0x40021000
 8000460:	40021400 	.word	0x40021400
 8000464:	40021800 	.word	0x40021800
 8000468:	40021c00 	.word	0x40021c00
 800046c:	40022000 	.word	0x40022000

08000470 <GPIO_Init>:
 * @return			- none
 *
 * @note			-
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b088      	sub	sp, #32
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
	//enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2101      	movs	r1, #1
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ff0e 	bl	80002a0 <GPIO_PeriClockControl>

	uint32_t temp = 0; //temp. register
 8000484:	2300      	movs	r3, #0
 8000486:	61fb      	str	r3, [r7, #28]

	//1. Configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	795b      	ldrb	r3, [r3, #5]
 800048c:	2b03      	cmp	r3, #3
 800048e:	d820      	bhi.n	80004d2 <GPIO_Init+0x62>
	{
		//non-interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	795b      	ldrb	r3, [r3, #5]
 8000494:	461a      	mov	r2, r3
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	791b      	ldrb	r3, [r3, #4]
 800049a:	005b      	lsls	r3, r3, #1
 800049c:	fa02 f303 	lsl.w	r3, r2, r3
 80004a0:	61fb      	str	r3, [r7, #28]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	681a      	ldr	r2, [r3, #0]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	791b      	ldrb	r3, [r3, #4]
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	2103      	movs	r1, #3
 80004b0:	fa01 f303 	lsl.w	r3, r1, r3
 80004b4:	43db      	mvns	r3, r3
 80004b6:	4619      	mov	r1, r3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	400a      	ands	r2, r1
 80004be:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	6819      	ldr	r1, [r3, #0]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	69fa      	ldr	r2, [r7, #28]
 80004cc:	430a      	orrs	r2, r1
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	e0e4      	b.n	800069c <GPIO_Init+0x22c>

	} else
	{
		//interrupt mode
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	795b      	ldrb	r3, [r3, #5]
 80004d6:	2b04      	cmp	r3, #4
 80004d8:	d117      	bne.n	800050a <GPIO_Init+0x9a>
		{
			//1. configure FTSR
			EXTI->FTSR |= (0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004da:	4b4e      	ldr	r3, [pc, #312]	; (8000614 <GPIO_Init+0x1a4>)
 80004dc:	68db      	ldr	r3, [r3, #12]
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	7912      	ldrb	r2, [r2, #4]
 80004e2:	4611      	mov	r1, r2
 80004e4:	2201      	movs	r2, #1
 80004e6:	408a      	lsls	r2, r1
 80004e8:	4611      	mov	r1, r2
 80004ea:	4a4a      	ldr	r2, [pc, #296]	; (8000614 <GPIO_Init+0x1a4>)
 80004ec:	430b      	orrs	r3, r1
 80004ee:	60d3      	str	r3, [r2, #12]
			//clearing corresponding RTSR bit
			EXTI->RTSR &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f0:	4b48      	ldr	r3, [pc, #288]	; (8000614 <GPIO_Init+0x1a4>)
 80004f2:	689b      	ldr	r3, [r3, #8]
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	7912      	ldrb	r2, [r2, #4]
 80004f8:	4611      	mov	r1, r2
 80004fa:	2201      	movs	r2, #1
 80004fc:	408a      	lsls	r2, r1
 80004fe:	43d2      	mvns	r2, r2
 8000500:	4611      	mov	r1, r2
 8000502:	4a44      	ldr	r2, [pc, #272]	; (8000614 <GPIO_Init+0x1a4>)
 8000504:	400b      	ands	r3, r1
 8000506:	6093      	str	r3, [r2, #8]
 8000508:	e035      	b.n	8000576 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	795b      	ldrb	r3, [r3, #5]
 800050e:	2b05      	cmp	r3, #5
 8000510:	d117      	bne.n	8000542 <GPIO_Init+0xd2>
		{
			//1. configure RTSR
			EXTI->RTSR |= (0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000512:	4b40      	ldr	r3, [pc, #256]	; (8000614 <GPIO_Init+0x1a4>)
 8000514:	689b      	ldr	r3, [r3, #8]
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	7912      	ldrb	r2, [r2, #4]
 800051a:	4611      	mov	r1, r2
 800051c:	2201      	movs	r2, #1
 800051e:	408a      	lsls	r2, r1
 8000520:	4611      	mov	r1, r2
 8000522:	4a3c      	ldr	r2, [pc, #240]	; (8000614 <GPIO_Init+0x1a4>)
 8000524:	430b      	orrs	r3, r1
 8000526:	6093      	str	r3, [r2, #8]
			//clearing corresponding RTSR bit
			EXTI->FTSR &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000528:	4b3a      	ldr	r3, [pc, #232]	; (8000614 <GPIO_Init+0x1a4>)
 800052a:	68db      	ldr	r3, [r3, #12]
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	7912      	ldrb	r2, [r2, #4]
 8000530:	4611      	mov	r1, r2
 8000532:	2201      	movs	r2, #1
 8000534:	408a      	lsls	r2, r1
 8000536:	43d2      	mvns	r2, r2
 8000538:	4611      	mov	r1, r2
 800053a:	4a36      	ldr	r2, [pc, #216]	; (8000614 <GPIO_Init+0x1a4>)
 800053c:	400b      	ands	r3, r1
 800053e:	60d3      	str	r3, [r2, #12]
 8000540:	e019      	b.n	8000576 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	795b      	ldrb	r3, [r3, #5]
 8000546:	2b06      	cmp	r3, #6
 8000548:	d115      	bne.n	8000576 <GPIO_Init+0x106>
		{
			//1. configure FTSR and RTSR
			EXTI->RTSR |= (0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800054a:	4b32      	ldr	r3, [pc, #200]	; (8000614 <GPIO_Init+0x1a4>)
 800054c:	689b      	ldr	r3, [r3, #8]
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	7912      	ldrb	r2, [r2, #4]
 8000552:	4611      	mov	r1, r2
 8000554:	2201      	movs	r2, #1
 8000556:	408a      	lsls	r2, r1
 8000558:	4611      	mov	r1, r2
 800055a:	4a2e      	ldr	r2, [pc, #184]	; (8000614 <GPIO_Init+0x1a4>)
 800055c:	430b      	orrs	r3, r1
 800055e:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000560:	4b2c      	ldr	r3, [pc, #176]	; (8000614 <GPIO_Init+0x1a4>)
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	7912      	ldrb	r2, [r2, #4]
 8000568:	4611      	mov	r1, r2
 800056a:	2201      	movs	r2, #1
 800056c:	408a      	lsls	r2, r1
 800056e:	4611      	mov	r1, r2
 8000570:	4a28      	ldr	r2, [pc, #160]	; (8000614 <GPIO_Init+0x1a4>)
 8000572:	430b      	orrs	r3, r1
 8000574:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint32_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	791b      	ldrb	r3, [r3, #4]
 800057a:	089b      	lsrs	r3, r3, #2
 800057c:	b2db      	uxtb	r3, r3
 800057e:	61bb      	str	r3, [r7, #24]
		uint32_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	791b      	ldrb	r3, [r3, #4]
 8000584:	f003 0303 	and.w	r3, r3, #3
 8000588:	617b      	str	r3, [r7, #20]
		SYSCFG_PCLK_EN();
 800058a:	4b23      	ldr	r3, [pc, #140]	; (8000618 <GPIO_Init+0x1a8>)
 800058c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800058e:	4a22      	ldr	r2, [pc, #136]	; (8000618 <GPIO_Init+0x1a8>)
 8000590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000594:	6453      	str	r3, [r2, #68]	; 0x44
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a20      	ldr	r2, [pc, #128]	; (800061c <GPIO_Init+0x1ac>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d04f      	beq.n	8000640 <GPIO_Init+0x1d0>
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a1e      	ldr	r2, [pc, #120]	; (8000620 <GPIO_Init+0x1b0>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d032      	beq.n	8000610 <GPIO_Init+0x1a0>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a1d      	ldr	r2, [pc, #116]	; (8000624 <GPIO_Init+0x1b4>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d02b      	beq.n	800060c <GPIO_Init+0x19c>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a1b      	ldr	r2, [pc, #108]	; (8000628 <GPIO_Init+0x1b8>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d024      	beq.n	8000608 <GPIO_Init+0x198>
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a1a      	ldr	r2, [pc, #104]	; (800062c <GPIO_Init+0x1bc>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d01d      	beq.n	8000604 <GPIO_Init+0x194>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a18      	ldr	r2, [pc, #96]	; (8000630 <GPIO_Init+0x1c0>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d016      	beq.n	8000600 <GPIO_Init+0x190>
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a17      	ldr	r2, [pc, #92]	; (8000634 <GPIO_Init+0x1c4>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d00f      	beq.n	80005fc <GPIO_Init+0x18c>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a15      	ldr	r2, [pc, #84]	; (8000638 <GPIO_Init+0x1c8>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d008      	beq.n	80005f8 <GPIO_Init+0x188>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a14      	ldr	r2, [pc, #80]	; (800063c <GPIO_Init+0x1cc>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d101      	bne.n	80005f4 <GPIO_Init+0x184>
 80005f0:	2308      	movs	r3, #8
 80005f2:	e026      	b.n	8000642 <GPIO_Init+0x1d2>
 80005f4:	2300      	movs	r3, #0
 80005f6:	e024      	b.n	8000642 <GPIO_Init+0x1d2>
 80005f8:	2307      	movs	r3, #7
 80005fa:	e022      	b.n	8000642 <GPIO_Init+0x1d2>
 80005fc:	2306      	movs	r3, #6
 80005fe:	e020      	b.n	8000642 <GPIO_Init+0x1d2>
 8000600:	2305      	movs	r3, #5
 8000602:	e01e      	b.n	8000642 <GPIO_Init+0x1d2>
 8000604:	2304      	movs	r3, #4
 8000606:	e01c      	b.n	8000642 <GPIO_Init+0x1d2>
 8000608:	2303      	movs	r3, #3
 800060a:	e01a      	b.n	8000642 <GPIO_Init+0x1d2>
 800060c:	2302      	movs	r3, #2
 800060e:	e018      	b.n	8000642 <GPIO_Init+0x1d2>
 8000610:	2301      	movs	r3, #1
 8000612:	e016      	b.n	8000642 <GPIO_Init+0x1d2>
 8000614:	40013c00 	.word	0x40013c00
 8000618:	40023800 	.word	0x40023800
 800061c:	40020000 	.word	0x40020000
 8000620:	40020400 	.word	0x40020400
 8000624:	40020800 	.word	0x40020800
 8000628:	40020c00 	.word	0x40020c00
 800062c:	40021000 	.word	0x40021000
 8000630:	40021400 	.word	0x40021400
 8000634:	40021800 	.word	0x40021800
 8000638:	40021c00 	.word	0x40021c00
 800063c:	40022000 	.word	0x40022000
 8000640:	2300      	movs	r3, #0
 8000642:	74fb      	strb	r3, [r7, #19]
		SYSCFG->EXTICR[temp1] &= ~(0xF << (temp2*4));//clearing the bits
 8000644:	4a67      	ldr	r2, [pc, #412]	; (80007e4 <GPIO_Init+0x374>)
 8000646:	69bb      	ldr	r3, [r7, #24]
 8000648:	3302      	adds	r3, #2
 800064a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800064e:	697a      	ldr	r2, [r7, #20]
 8000650:	0092      	lsls	r2, r2, #2
 8000652:	210f      	movs	r1, #15
 8000654:	fa01 f202 	lsl.w	r2, r1, r2
 8000658:	43d2      	mvns	r2, r2
 800065a:	4962      	ldr	r1, [pc, #392]	; (80007e4 <GPIO_Init+0x374>)
 800065c:	401a      	ands	r2, r3
 800065e:	69bb      	ldr	r3, [r7, #24]
 8000660:	3302      	adds	r3, #2
 8000662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[temp1] |= portcode << (temp2*4);//setting the bits
 8000666:	4a5f      	ldr	r2, [pc, #380]	; (80007e4 <GPIO_Init+0x374>)
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	3302      	adds	r3, #2
 800066c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000670:	7cf9      	ldrb	r1, [r7, #19]
 8000672:	697a      	ldr	r2, [r7, #20]
 8000674:	0092      	lsls	r2, r2, #2
 8000676:	fa01 f202 	lsl.w	r2, r1, r2
 800067a:	495a      	ldr	r1, [pc, #360]	; (80007e4 <GPIO_Init+0x374>)
 800067c:	431a      	orrs	r2, r3
 800067e:	69bb      	ldr	r3, [r7, #24]
 8000680:	3302      	adds	r3, #2
 8000682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


		//3. enable the interrupt delivery using the Interrupt Mask Register IMR
		EXTI->IMR |= (0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000686:	4b58      	ldr	r3, [pc, #352]	; (80007e8 <GPIO_Init+0x378>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	7912      	ldrb	r2, [r2, #4]
 800068e:	4611      	mov	r1, r2
 8000690:	2201      	movs	r2, #1
 8000692:	408a      	lsls	r2, r1
 8000694:	4611      	mov	r1, r2
 8000696:	4a54      	ldr	r2, [pc, #336]	; (80007e8 <GPIO_Init+0x378>)
 8000698:	430b      	orrs	r3, r1
 800069a:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]

	//2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed  << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	799b      	ldrb	r3, [r3, #6]
 80006a4:	461a      	mov	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	791b      	ldrb	r3, [r3, #4]
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	fa02 f303 	lsl.w	r3, r2, r3
 80006b0:	61fb      	str	r3, [r7, #28]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	689a      	ldr	r2, [r3, #8]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	791b      	ldrb	r3, [r3, #4]
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	2103      	movs	r1, #3
 80006c0:	fa01 f303 	lsl.w	r3, r1, r3
 80006c4:	43db      	mvns	r3, r3
 80006c6:	4619      	mov	r1, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	400a      	ands	r2, r1
 80006ce:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	6899      	ldr	r1, [r3, #8]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	69fa      	ldr	r2, [r7, #28]
 80006dc:	430a      	orrs	r2, r1
 80006de:	609a      	str	r2, [r3, #8]
	temp = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61fb      	str	r3, [r7, #28]

	//3. Configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl  << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	79db      	ldrb	r3, [r3, #7]
 80006e8:	461a      	mov	r2, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	791b      	ldrb	r3, [r3, #4]
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	fa02 f303 	lsl.w	r3, r2, r3
 80006f4:	61fb      	str	r3, [r7, #28]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	68da      	ldr	r2, [r3, #12]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	791b      	ldrb	r3, [r3, #4]
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	2103      	movs	r1, #3
 8000704:	fa01 f303 	lsl.w	r3, r1, r3
 8000708:	43db      	mvns	r3, r3
 800070a:	4619      	mov	r1, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	400a      	ands	r2, r1
 8000712:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	68d9      	ldr	r1, [r3, #12]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	69fa      	ldr	r2, [r7, #28]
 8000720:	430a      	orrs	r2, r1
 8000722:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]

	//4. Configure the OPtype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType  << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	7a1b      	ldrb	r3, [r3, #8]
 800072c:	461a      	mov	r2, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	791b      	ldrb	r3, [r3, #4]
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	61fb      	str	r3, [r7, #28]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	685a      	ldr	r2, [r3, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	791b      	ldrb	r3, [r3, #4]
 8000742:	4619      	mov	r1, r3
 8000744:	2301      	movs	r3, #1
 8000746:	408b      	lsls	r3, r1
 8000748:	43db      	mvns	r3, r3
 800074a:	4619      	mov	r1, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	400a      	ands	r2, r1
 8000752:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	6859      	ldr	r1, [r3, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	69fa      	ldr	r2, [r7, #28]
 8000760:	430a      	orrs	r2, r1
 8000762:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]

	//5. Configure the alt functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	795b      	ldrb	r3, [r3, #5]
 800076c:	2b02      	cmp	r3, #2
 800076e:	d133      	bne.n	80007d8 <GPIO_Init+0x368>
	{
		uint32_t temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)/8;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	791b      	ldrb	r3, [r3, #4]
 8000774:	08db      	lsrs	r3, r3, #3
 8000776:	b2db      	uxtb	r3, r3
 8000778:	60fb      	str	r3, [r7, #12]
		uint32_t temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)%8;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	791b      	ldrb	r3, [r3, #4]
 800077e:	f003 0307 	and.w	r3, r3, #7
 8000782:	60bb      	str	r3, [r7, #8]

		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (temp2*4));
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	7a5b      	ldrb	r3, [r3, #9]
 8000788:	461a      	mov	r2, r3
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	009b      	lsls	r3, r3, #2
 800078e:	fa02 f303 	lsl.w	r3, r2, r3
 8000792:	61fb      	str	r3, [r7, #28]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (temp2*4));
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	68fa      	ldr	r2, [r7, #12]
 800079a:	3208      	adds	r2, #8
 800079c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	210f      	movs	r1, #15
 80007a6:	fa01 f303 	lsl.w	r3, r1, r3
 80007aa:	43db      	mvns	r3, r3
 80007ac:	4619      	mov	r1, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4011      	ands	r1, r2
 80007b4:	68fa      	ldr	r2, [r7, #12]
 80007b6:	3208      	adds	r2, #8
 80007b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |=temp;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	68fa      	ldr	r2, [r7, #12]
 80007c2:	3208      	adds	r2, #8
 80007c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	69fa      	ldr	r2, [r7, #28]
 80007ce:	4311      	orrs	r1, r2
 80007d0:	68fa      	ldr	r2, [r7, #12]
 80007d2:	3208      	adds	r2, #8
 80007d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
	temp = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
}
 80007dc:	bf00      	nop
 80007de:	3720      	adds	r7, #32
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40013800 	.word	0x40013800
 80007e8:	40013c00 	.word	0x40013c00

080007ec <GPIO_ReadFromInputPin>:
}

/*Date read and write*/

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x00000001);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	691a      	ldr	r2, [r3, #16]
 80007fc:	78fb      	ldrb	r3, [r7, #3]
 80007fe:	fa22 f303 	lsr.w	r3, r2, r3
 8000802:	b2db      	uxtb	r3, r3
 8000804:	f003 0301 	and.w	r3, r3, #1
 8000808:	73fb      	strb	r3, [r7, #15]
	return value;
 800080a:	7bfb      	ldrb	r3, [r7, #15]
}
 800080c:	4618      	mov	r0, r3
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
	...

08000818 <RCC_GetPCLK1Value>:
 *
 * @note			- Refer to clock tree for frequency calculation
 */

uint32_t RCC_GetPCLK1Value(void)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
	uint32_t pclk1;
	uint32_t SystemClk;
	uint8_t clksrc, temp, ahb_ps, apb1_ps;

	clksrc =(RCC->CFGR >> 2)&(0x3);
 800081e:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <RCC_GetPCLK1Value+0x90>)
 8000820:	689b      	ldr	r3, [r3, #8]
 8000822:	089b      	lsrs	r3, r3, #2
 8000824:	b2db      	uxtb	r3, r3
 8000826:	f003 0303 	and.w	r3, r3, #3
 800082a:	727b      	strb	r3, [r7, #9]

	if (clksrc == 0)
 800082c:	7a7b      	ldrb	r3, [r7, #9]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d102      	bne.n	8000838 <RCC_GetPCLK1Value+0x20>
	{
		//HSI
		SystemClk = 16000000; //16MHz
 8000832:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <RCC_GetPCLK1Value+0x94>)
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	e004      	b.n	8000842 <RCC_GetPCLK1Value+0x2a>
	} else if (clksrc == 1)
 8000838:	7a7b      	ldrb	r3, [r7, #9]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d101      	bne.n	8000842 <RCC_GetPCLK1Value+0x2a>
	{
		//HSE Oscillator
		SystemClk = 8000000; //16MHz
 800083e:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <RCC_GetPCLK1Value+0x98>)
 8000840:	60fb      	str	r3, [r7, #12]
	{
		//PLL used as system clock. (NA in this course)
	}

	// Determination of AHB prescaler
	temp = (RCC->CFGR >> 4) & (0xF);
 8000842:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <RCC_GetPCLK1Value+0x90>)
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	091b      	lsrs	r3, r3, #4
 8000848:	b2db      	uxtb	r3, r3
 800084a:	f003 030f 	and.w	r3, r3, #15
 800084e:	723b      	strb	r3, [r7, #8]
	if (temp < 8)
 8000850:	7a3b      	ldrb	r3, [r7, #8]
 8000852:	2b07      	cmp	r3, #7
 8000854:	d802      	bhi.n	800085c <RCC_GetPCLK1Value+0x44>
	{
		ahb_ps = 1;
 8000856:	2301      	movs	r3, #1
 8000858:	72fb      	strb	r3, [r7, #11]
 800085a:	e005      	b.n	8000868 <RCC_GetPCLK1Value+0x50>
	} else
	{
		ahb_ps = AHB_PreScaler[temp-8];
 800085c:	7a3b      	ldrb	r3, [r7, #8]
 800085e:	3b08      	subs	r3, #8
 8000860:	4a14      	ldr	r2, [pc, #80]	; (80008b4 <RCC_GetPCLK1Value+0x9c>)
 8000862:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000866:	72fb      	strb	r3, [r7, #11]
	}

	//Determination of APB1 prescaler
	temp = (RCC->CFGR >> 10) & (0x7);
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <RCC_GetPCLK1Value+0x90>)
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	0a9b      	lsrs	r3, r3, #10
 800086e:	b2db      	uxtb	r3, r3
 8000870:	f003 0307 	and.w	r3, r3, #7
 8000874:	723b      	strb	r3, [r7, #8]
	if (temp < 4)
 8000876:	7a3b      	ldrb	r3, [r7, #8]
 8000878:	2b03      	cmp	r3, #3
 800087a:	d802      	bhi.n	8000882 <RCC_GetPCLK1Value+0x6a>
	{
		apb1_ps = 1;
 800087c:	2301      	movs	r3, #1
 800087e:	72bb      	strb	r3, [r7, #10]
 8000880:	e004      	b.n	800088c <RCC_GetPCLK1Value+0x74>
	}else
	{
		apb1_ps = APB_PreScaler[temp-4];
 8000882:	7a3b      	ldrb	r3, [r7, #8]
 8000884:	3b04      	subs	r3, #4
 8000886:	4a0c      	ldr	r2, [pc, #48]	; (80008b8 <RCC_GetPCLK1Value+0xa0>)
 8000888:	5cd3      	ldrb	r3, [r2, r3]
 800088a:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk/ahb_ps)/apb1_ps;
 800088c:	7afb      	ldrb	r3, [r7, #11]
 800088e:	68fa      	ldr	r2, [r7, #12]
 8000890:	fbb2 f2f3 	udiv	r2, r2, r3
 8000894:	7abb      	ldrb	r3, [r7, #10]
 8000896:	fbb2 f3f3 	udiv	r3, r2, r3
 800089a:	607b      	str	r3, [r7, #4]

	return pclk1;
 800089c:	687b      	ldr	r3, [r7, #4]

}
 800089e:	4618      	mov	r0, r3
 80008a0:	3714      	adds	r7, #20
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	40023800 	.word	0x40023800
 80008ac:	00f42400 	.word	0x00f42400
 80008b0:	007a1200 	.word	0x007a1200
 80008b4:	20000000 	.word	0x20000000
 80008b8:	20000010 	.word	0x20000010

080008bc <RCC_GetPCLK2Value>:
 *
 * @note			- Refer to clock tree for frequency calculation
 */

uint32_t RCC_GetPCLK2Value(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
	uint32_t pclk2;
	uint32_t SystemClk;
	uint8_t clksrc, temp, ahb_ps, apb2_ps;

	clksrc =(RCC->CFGR >> 2)&(0x3);
 80008c2:	4b22      	ldr	r3, [pc, #136]	; (800094c <RCC_GetPCLK2Value+0x90>)
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	089b      	lsrs	r3, r3, #2
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	f003 0303 	and.w	r3, r3, #3
 80008ce:	727b      	strb	r3, [r7, #9]

	if (clksrc == 0)
 80008d0:	7a7b      	ldrb	r3, [r7, #9]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d102      	bne.n	80008dc <RCC_GetPCLK2Value+0x20>
	{
		//HSI
		SystemClk = 16000000; //16MHz
 80008d6:	4b1e      	ldr	r3, [pc, #120]	; (8000950 <RCC_GetPCLK2Value+0x94>)
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	e004      	b.n	80008e6 <RCC_GetPCLK2Value+0x2a>
	} else if (clksrc == 1)
 80008dc:	7a7b      	ldrb	r3, [r7, #9]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d101      	bne.n	80008e6 <RCC_GetPCLK2Value+0x2a>
	{
		//HSE Oscillator
		SystemClk = 8000000; //16MHz
 80008e2:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <RCC_GetPCLK2Value+0x98>)
 80008e4:	60fb      	str	r3, [r7, #12]
	{
		//PLL used as system clock. (NA in this course)
	}

	// Determination of AHB prescaler
	temp = (RCC->CFGR >> 4) & (0xF);
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <RCC_GetPCLK2Value+0x90>)
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	091b      	lsrs	r3, r3, #4
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	f003 030f 	and.w	r3, r3, #15
 80008f2:	723b      	strb	r3, [r7, #8]
	if (temp < 8)
 80008f4:	7a3b      	ldrb	r3, [r7, #8]
 80008f6:	2b07      	cmp	r3, #7
 80008f8:	d802      	bhi.n	8000900 <RCC_GetPCLK2Value+0x44>
	{
		ahb_ps = 1;
 80008fa:	2301      	movs	r3, #1
 80008fc:	72fb      	strb	r3, [r7, #11]
 80008fe:	e005      	b.n	800090c <RCC_GetPCLK2Value+0x50>
	} else
	{
		ahb_ps = AHB_PreScaler[temp-8];
 8000900:	7a3b      	ldrb	r3, [r7, #8]
 8000902:	3b08      	subs	r3, #8
 8000904:	4a14      	ldr	r2, [pc, #80]	; (8000958 <RCC_GetPCLK2Value+0x9c>)
 8000906:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800090a:	72fb      	strb	r3, [r7, #11]
	}

	//Determination of APB2 prescaler
	temp = (RCC->CFGR >> 13) & (0x7);
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <RCC_GetPCLK2Value+0x90>)
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	0b5b      	lsrs	r3, r3, #13
 8000912:	b2db      	uxtb	r3, r3
 8000914:	f003 0307 	and.w	r3, r3, #7
 8000918:	723b      	strb	r3, [r7, #8]
	if (temp < 4)
 800091a:	7a3b      	ldrb	r3, [r7, #8]
 800091c:	2b03      	cmp	r3, #3
 800091e:	d802      	bhi.n	8000926 <RCC_GetPCLK2Value+0x6a>
	{
		apb2_ps = 1;
 8000920:	2301      	movs	r3, #1
 8000922:	72bb      	strb	r3, [r7, #10]
 8000924:	e004      	b.n	8000930 <RCC_GetPCLK2Value+0x74>
	}else
	{
		apb2_ps = APB_PreScaler[temp-4];
 8000926:	7a3b      	ldrb	r3, [r7, #8]
 8000928:	3b04      	subs	r3, #4
 800092a:	4a0c      	ldr	r2, [pc, #48]	; (800095c <RCC_GetPCLK2Value+0xa0>)
 800092c:	5cd3      	ldrb	r3, [r2, r3]
 800092e:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClk/ahb_ps)/apb2_ps;
 8000930:	7afb      	ldrb	r3, [r7, #11]
 8000932:	68fa      	ldr	r2, [r7, #12]
 8000934:	fbb2 f2f3 	udiv	r2, r2, r3
 8000938:	7abb      	ldrb	r3, [r7, #10]
 800093a:	fbb2 f3f3 	udiv	r3, r2, r3
 800093e:	607b      	str	r3, [r7, #4]

	return pclk2;
 8000940:	687b      	ldr	r3, [r7, #4]

}
 8000942:	4618      	mov	r0, r3
 8000944:	3714      	adds	r7, #20
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr
 800094c:	40023800 	.word	0x40023800
 8000950:	00f42400 	.word	0x00f42400
 8000954:	007a1200 	.word	0x007a1200
 8000958:	20000000 	.word	0x20000000
 800095c:	20000010 	.word	0x20000010

08000960 <USART_SetBaudRate>:
 *
 * @Note              - The API sets the Mantissa and Fraction part of the BRR register

 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

  uint32_t tempreg=0;
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART6)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a31      	ldr	r2, [pc, #196]	; (8000a38 <USART_SetBaudRate+0xd8>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d003      	beq.n	800097e <USART_SetBaudRate+0x1e>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a30      	ldr	r2, [pc, #192]	; (8000a3c <USART_SetBaudRate+0xdc>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d103      	bne.n	8000986 <USART_SetBaudRate+0x26>
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 800097e:	f7ff ff9d 	bl	80008bc <RCC_GetPCLK2Value>
 8000982:	61f8      	str	r0, [r7, #28]
 8000984:	e002      	b.n	800098c <USART_SetBaudRate+0x2c>
  }else
  {
	   PCLKx = RCC_GetPCLK1Value();
 8000986:	f7ff ff47 	bl	8000818 <RCC_GetPCLK1Value>
 800098a:	61f8      	str	r0, [r7, #28]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000994:	2b00      	cmp	r3, #0
 8000996:	d00b      	beq.n	80009b0 <USART_SetBaudRate+0x50>
  {
	   //OVER8 = 1 , over sampling by 8 (equation has been multiplied by 100 to convert to whole number)
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8000998:	69fa      	ldr	r2, [r7, #28]
 800099a:	4613      	mov	r3, r2
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	4413      	add	r3, r2
 80009a0:	009a      	lsls	r2, r3, #2
 80009a2:	441a      	add	r2, r3
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ac:	61bb      	str	r3, [r7, #24]
 80009ae:	e00a      	b.n	80009c6 <USART_SetBaudRate+0x66>
  }else
  {
	   //over sampling by 16 (equation has been multiplied by 100 to convert to whole number)
	  usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 80009b0:	69fa      	ldr	r2, [r7, #28]
 80009b2:	4613      	mov	r3, r2
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	4413      	add	r3, r2
 80009b8:	009a      	lsls	r2, r3, #2
 80009ba:	441a      	add	r2, r3
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c4:	61bb      	str	r3, [r7, #24]
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;
 80009c6:	69bb      	ldr	r3, [r7, #24]
 80009c8:	4a1d      	ldr	r2, [pc, #116]	; (8000a40 <USART_SetBaudRate+0xe0>)
 80009ca:	fba2 2303 	umull	r2, r3, r2, r3
 80009ce:	095b      	lsrs	r3, r3, #5
 80009d0:	60fb      	str	r3, [r7, #12]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	011b      	lsls	r3, r3, #4
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	4313      	orrs	r3, r2
 80009da:	613b      	str	r3, [r7, #16]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	2264      	movs	r2, #100	; 0x64
 80009e0:	fb02 f303 	mul.w	r3, r2, r3
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	1ad3      	subs	r3, r2, r3
 80009e8:	617b      	str	r3, [r7, #20]

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	68db      	ldr	r3, [r3, #12]
 80009ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d00a      	beq.n	8000a0c <USART_SetBaudRate+0xac>
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	3332      	adds	r3, #50	; 0x32
 80009fc:	4a10      	ldr	r2, [pc, #64]	; (8000a40 <USART_SetBaudRate+0xe0>)
 80009fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000a02:	095b      	lsrs	r3, r3, #5
 8000a04:	f003 0307 	and.w	r3, r3, #7
 8000a08:	617b      	str	r3, [r7, #20]
 8000a0a:	e009      	b.n	8000a20 <USART_SetBaudRate+0xc0>

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	011b      	lsls	r3, r3, #4
 8000a10:	3332      	adds	r3, #50	; 0x32
 8000a12:	4a0b      	ldr	r2, [pc, #44]	; (8000a40 <USART_SetBaudRate+0xe0>)
 8000a14:	fba2 2303 	umull	r2, r3, r2, r3
 8000a18:	095b      	lsrs	r3, r3, #5
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	617b      	str	r3, [r7, #20]

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  tempreg |= F_part;
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]

  //copy the value of tempreg in to BRR register
  pUSARTx->BRR = tempreg;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	609a      	str	r2, [r3, #8]
}
 8000a2e:	bf00      	nop
 8000a30:	3720      	adds	r7, #32
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40011000 	.word	0x40011000
 8000a3c:	40011400 	.word	0x40011400
 8000a40:	51eb851f 	.word	0x51eb851f

08000a44 <USART_PeriClockControl>:
 * @return			- none
 *
 * @note			- For generic macros refer to MCU specific header file
 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8000a50:	78fb      	ldrb	r3, [r7, #3]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d141      	bne.n	8000ada <USART_PeriClockControl+0x96>
		if (pUSARTx == USART1) {
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a43      	ldr	r2, [pc, #268]	; (8000b68 <USART_PeriClockControl+0x124>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d106      	bne.n	8000a6c <USART_PeriClockControl+0x28>
			USART1_PCLK_EN();
 8000a5e:	4b43      	ldr	r3, [pc, #268]	; (8000b6c <USART_PeriClockControl+0x128>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	4a42      	ldr	r2, [pc, #264]	; (8000b6c <USART_PeriClockControl+0x128>)
 8000a64:	f043 0310 	orr.w	r3, r3, #16
 8000a68:	6453      	str	r3, [r2, #68]	; 0x44
			UART5_PCLK_DI();
		} else if (pUSARTx == USART6) {
			USART6_PCLK_DI();
		}
	}
}
 8000a6a:	e077      	b.n	8000b5c <USART_PeriClockControl+0x118>
		} else if (pUSARTx == USART2) {
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4a40      	ldr	r2, [pc, #256]	; (8000b70 <USART_PeriClockControl+0x12c>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d106      	bne.n	8000a82 <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000a74:	4b3d      	ldr	r3, [pc, #244]	; (8000b6c <USART_PeriClockControl+0x128>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a78:	4a3c      	ldr	r2, [pc, #240]	; (8000b6c <USART_PeriClockControl+0x128>)
 8000a7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a80:	e06c      	b.n	8000b5c <USART_PeriClockControl+0x118>
		} else if (pUSARTx == USART3) {
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a3b      	ldr	r2, [pc, #236]	; (8000b74 <USART_PeriClockControl+0x130>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d106      	bne.n	8000a98 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000a8a:	4b38      	ldr	r3, [pc, #224]	; (8000b6c <USART_PeriClockControl+0x128>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	4a37      	ldr	r2, [pc, #220]	; (8000b6c <USART_PeriClockControl+0x128>)
 8000a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a94:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a96:	e061      	b.n	8000b5c <USART_PeriClockControl+0x118>
		} else if (pUSARTx == UART4)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a37      	ldr	r2, [pc, #220]	; (8000b78 <USART_PeriClockControl+0x134>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d106      	bne.n	8000aae <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 8000aa0:	4b32      	ldr	r3, [pc, #200]	; (8000b6c <USART_PeriClockControl+0x128>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	4a31      	ldr	r2, [pc, #196]	; (8000b6c <USART_PeriClockControl+0x128>)
 8000aa6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000aaa:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000aac:	e056      	b.n	8000b5c <USART_PeriClockControl+0x118>
		} else if (pUSARTx == UART5)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a32      	ldr	r2, [pc, #200]	; (8000b7c <USART_PeriClockControl+0x138>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d106      	bne.n	8000ac4 <USART_PeriClockControl+0x80>
			UART5_PCLK_EN();
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <USART_PeriClockControl+0x128>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a2c      	ldr	r2, [pc, #176]	; (8000b6c <USART_PeriClockControl+0x128>)
 8000abc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ac2:	e04b      	b.n	8000b5c <USART_PeriClockControl+0x118>
		} else if (pUSARTx == USART6)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a2e      	ldr	r2, [pc, #184]	; (8000b80 <USART_PeriClockControl+0x13c>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d147      	bne.n	8000b5c <USART_PeriClockControl+0x118>
			USART6_PCLK_EN();
 8000acc:	4b27      	ldr	r3, [pc, #156]	; (8000b6c <USART_PeriClockControl+0x128>)
 8000ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad0:	4a26      	ldr	r2, [pc, #152]	; (8000b6c <USART_PeriClockControl+0x128>)
 8000ad2:	f043 0320 	orr.w	r3, r3, #32
 8000ad6:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000ad8:	e040      	b.n	8000b5c <USART_PeriClockControl+0x118>
		if (pUSARTx == USART1) {
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a22      	ldr	r2, [pc, #136]	; (8000b68 <USART_PeriClockControl+0x124>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d106      	bne.n	8000af0 <USART_PeriClockControl+0xac>
			USART1_PCLK_DI();
 8000ae2:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <USART_PeriClockControl+0x128>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	4a21      	ldr	r2, [pc, #132]	; (8000b6c <USART_PeriClockControl+0x128>)
 8000ae8:	f023 0310 	bic.w	r3, r3, #16
 8000aec:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000aee:	e035      	b.n	8000b5c <USART_PeriClockControl+0x118>
		} else if (pUSARTx == USART2) {
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a1f      	ldr	r2, [pc, #124]	; (8000b70 <USART_PeriClockControl+0x12c>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d106      	bne.n	8000b06 <USART_PeriClockControl+0xc2>
			USART2_PCLK_DI();
 8000af8:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <USART_PeriClockControl+0x128>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	4a1b      	ldr	r2, [pc, #108]	; (8000b6c <USART_PeriClockControl+0x128>)
 8000afe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000b02:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b04:	e02a      	b.n	8000b5c <USART_PeriClockControl+0x118>
		} else if (pUSARTx == USART3) {
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a1a      	ldr	r2, [pc, #104]	; (8000b74 <USART_PeriClockControl+0x130>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d106      	bne.n	8000b1c <USART_PeriClockControl+0xd8>
			USART3_PCLK_DI();
 8000b0e:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <USART_PeriClockControl+0x128>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	4a16      	ldr	r2, [pc, #88]	; (8000b6c <USART_PeriClockControl+0x128>)
 8000b14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b1a:	e01f      	b.n	8000b5c <USART_PeriClockControl+0x118>
		} else if (pUSARTx == UART4) {
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a16      	ldr	r2, [pc, #88]	; (8000b78 <USART_PeriClockControl+0x134>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d106      	bne.n	8000b32 <USART_PeriClockControl+0xee>
			UART4_PCLK_DI();
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <USART_PeriClockControl+0x128>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	4a10      	ldr	r2, [pc, #64]	; (8000b6c <USART_PeriClockControl+0x128>)
 8000b2a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000b2e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b30:	e014      	b.n	8000b5c <USART_PeriClockControl+0x118>
		} else if (pUSARTx == UART5) {
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a11      	ldr	r2, [pc, #68]	; (8000b7c <USART_PeriClockControl+0x138>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d106      	bne.n	8000b48 <USART_PeriClockControl+0x104>
			UART5_PCLK_DI();
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <USART_PeriClockControl+0x128>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	4a0b      	ldr	r2, [pc, #44]	; (8000b6c <USART_PeriClockControl+0x128>)
 8000b40:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000b44:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b46:	e009      	b.n	8000b5c <USART_PeriClockControl+0x118>
		} else if (pUSARTx == USART6) {
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <USART_PeriClockControl+0x13c>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d105      	bne.n	8000b5c <USART_PeriClockControl+0x118>
			USART6_PCLK_DI();
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <USART_PeriClockControl+0x128>)
 8000b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b54:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <USART_PeriClockControl+0x128>)
 8000b56:	f023 0320 	bic.w	r3, r3, #32
 8000b5a:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40011000 	.word	0x40011000
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40004400 	.word	0x40004400
 8000b74:	40004800 	.word	0x40004800
 8000b78:	40004c00 	.word	0x40004c00
 8000b7c:	40005000 	.word	0x40005000
 8000b80:	40011400 	.word	0x40011400

08000b84 <USART_Init>:
 * @return			- none
 *
 * @note			- none
 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	//Temporary variable
	uint32_t tempreg = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]

	//Implement the code to enable the Clock for given USART peripheral
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2101      	movs	r1, #1
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff ff54 	bl	8000a44 <USART_PeriClockControl>

	/******************************** Configuration of CR1******************************************/

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if (pUSARTHandle->USARTx_Config.USART_Mode == USART_MODE_ONLY_RX) {
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	791b      	ldrb	r3, [r3, #4]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d104      	bne.n	8000bae <USART_Init+0x2a>
		//Implement the code to enable the Receiver bit field
		tempreg |= (1 << USART_CR1_RE);
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f043 0304 	orr.w	r3, r3, #4
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	e010      	b.n	8000bd0 <USART_Init+0x4c>
	} else if (pUSARTHandle->USARTx_Config.USART_Mode == USART_MODE_ONLY_TX) {
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	791b      	ldrb	r3, [r3, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d104      	bne.n	8000bc0 <USART_Init+0x3c>
		//Implement the code to enable the Transmitter bit field
		tempreg |= (1 << USART_CR1_TE);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	f043 0308 	orr.w	r3, r3, #8
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	e007      	b.n	8000bd0 <USART_Init+0x4c>

	} else if (pUSARTHandle->USARTx_Config.USART_Mode == USART_MODE_TXRX) {
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	791b      	ldrb	r3, [r3, #4]
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d103      	bne.n	8000bd0 <USART_Init+0x4c>
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ((1 << USART_CR1_RE) | (1 << USART_CR1_TE));
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f043 030c 	orr.w	r3, r3, #12
 8000bce:	60fb      	str	r3, [r7, #12]
	}

	//Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USARTx_Config.USART_WordLength << USART_CR1_M;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	7b5b      	ldrb	r3, [r3, #13]
 8000bd4:	031b      	lsls	r3, r3, #12
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	60fb      	str	r3, [r7, #12]

	//Configuration of parity control bit fields
	if (pUSARTHandle->USARTx_Config.USART_ParityControl == USART_PARITY_EN_EVEN) {
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	7b9b      	ldrb	r3, [r3, #14]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d104      	bne.n	8000bf0 <USART_Init+0x6c>
		//Implement the code to enable the parity control
		tempreg |= (1 << USART_CR1_PCE);
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	e00b      	b.n	8000c08 <USART_Init+0x84>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	} else if (pUSARTHandle->USARTx_Config.USART_ParityControl
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	7b9b      	ldrb	r3, [r3, #14]
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d107      	bne.n	8000c08 <USART_Init+0x84>
			== USART_PARITY_EN_ODD) {
		//Implement the code to enable the parity control
		tempreg |= (1 << USART_CR1_PCE);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bfe:	60fb      	str	r3, [r7, #12]

		//Implement the code to enable ODD parity
		tempreg |= (1 << USART_CR1_PS);
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c06:	60fb      	str	r3, [r7, #12]

	}

	//Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	60da      	str	r2, [r3, #12]

	/******************************** Configuration of CR2******************************************/

	tempreg = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USARTx_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	7b1b      	ldrb	r3, [r3, #12]
 8000c18:	031b      	lsls	r3, r3, #12
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	611a      	str	r2, [r3, #16]

	/******************************** Configuration of CR3******************************************/

	tempreg = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if (pUSARTHandle->USARTx_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS) {
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	7bdb      	ldrb	r3, [r3, #15]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d104      	bne.n	8000c40 <USART_Init+0xbc>
		//Implement the code to enable CTS flow control
		tempreg |= (1 << USART_CR3_CTSE);
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	e014      	b.n	8000c6a <USART_Init+0xe6>

	} else if (pUSARTHandle->USARTx_Config.USART_HWFlowControl
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	7bdb      	ldrb	r3, [r3, #15]
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d104      	bne.n	8000c52 <USART_Init+0xce>
			== USART_HW_FLOW_CTRL_RTS) {
		//Implement the code to enable RTS flow control
		tempreg |= (1 << USART_CR3_RTSE);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	e00b      	b.n	8000c6a <USART_Init+0xe6>

	} else if (pUSARTHandle->USARTx_Config.USART_HWFlowControl
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	7bdb      	ldrb	r3, [r3, #15]
 8000c56:	2b03      	cmp	r3, #3
 8000c58:	d107      	bne.n	8000c6a <USART_Init+0xe6>
			== USART_HW_FLOW_CTRL_CTS_RTS) {
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= (1 << USART_CR3_CTSE);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c60:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 << USART_CR3_RTSE);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c68:	60fb      	str	r3, [r7, #12]
	}

	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	615a      	str	r2, [r3, #20]

	/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USARTx_Config.USART_Baud);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4610      	mov	r0, r2
 8000c7e:	f7ff fe6f 	bl	8000960 <USART_SetBaudRate>
}
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <USART_SendData>:
 *
 * @Note              - Blocking API

 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b086      	sub	sp, #24
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	60f8      	str	r0, [r7, #12]
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	e031      	b.n	8000d00 <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000c9c:	bf00      	nop
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2180      	movs	r1, #128	; 0x80
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 faa6 	bl	80011f6 <USART_GetFlagStatus>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d0f6      	beq.n	8000c9e <USART_SendData+0x14>

         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USARTx_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	7b5b      	ldrb	r3, [r3, #13]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d118      	bne.n	8000cea <USART_SendData+0x60>
		{
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000cca:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USARTx_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	7b9b      	ldrb	r3, [r3, #14]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d106      	bne.n	8000ce2 <USART_SendData+0x58>
			{
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	e00b      	b.n	8000cfa <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	e007      	b.n	8000cfa <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	781a      	ldrb	r2, [r3, #0]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d3c9      	bcc.n	8000c9c <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000d08:	bf00      	nop
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2140      	movs	r1, #64	; 0x40
 8000d10:	4618      	mov	r0, r3
 8000d12:	f000 fa70 	bl	80011f6 <USART_GetFlagStatus>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d0f6      	beq.n	8000d0a <USART_SendData+0x80>
}
 8000d1c:	bf00      	nop
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <USART_ReceiveDataIT>:
 *
 * @Note              - None

 */
uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t Len)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b087      	sub	sp, #28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
	uint8_t rxstate = pUSARTHandle->RxBusyState;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d36:	75fb      	strb	r3, [r7, #23]

	if(rxstate!= USART_BUSY_IN_RX)
 8000d38:	7dfb      	ldrb	r3, [r7, #23]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d014      	beq.n	8000d68 <USART_ReceiveDataIT+0x44>
	{
		pUSARTHandle->RxLen = Len;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	61da      	str	r2, [r3, #28]
		pUSARTHandle->pRxBuffer = pRxBuffer;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	615a      	str	r2, [r3, #20]
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		(void)pUSARTHandle->pUSARTx->DR;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]

		//Implement the code to enable interrupt for RXNE
		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_RXNEIE);
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	68da      	ldr	r2, [r3, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f042 0220 	orr.w	r2, r2, #32
 8000d66:	60da      	str	r2, [r3, #12]
	}

	return rxstate;
 8000d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	371c      	adds	r7, #28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr

08000d74 <USART_IRQInterruptConfig>:
 * @return			- none
 *
 * @note			- For IRQ numbers, refer to macros in device specific header file
 */
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	460a      	mov	r2, r1
 8000d7e:	71fb      	strb	r3, [r7, #7]
 8000d80:	4613      	mov	r3, r2
 8000d82:	71bb      	strb	r3, [r7, #6]
	if (EnorDi == ENABLE) {
 8000d84:	79bb      	ldrb	r3, [r7, #6]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d133      	bne.n	8000df2 <USART_IRQInterruptConfig+0x7e>
		if (IRQNumber < 32) {
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2b1f      	cmp	r3, #31
 8000d8e:	d80a      	bhi.n	8000da6 <USART_IRQInterruptConfig+0x32>
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000d90:	4b34      	ldr	r3, [pc, #208]	; (8000e64 <USART_IRQInterruptConfig+0xf0>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	79fa      	ldrb	r2, [r7, #7]
 8000d96:	2101      	movs	r1, #1
 8000d98:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	4a31      	ldr	r2, [pc, #196]	; (8000e64 <USART_IRQInterruptConfig+0xf0>)
 8000da0:	430b      	orrs	r3, r1
 8000da2:	6013      	str	r3, [r2, #0]
		} else if (IRQNumber > 63 && IRQNumber < 96) {
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}

	}
}
 8000da4:	e059      	b.n	8000e5a <USART_IRQInterruptConfig+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	2b1f      	cmp	r3, #31
 8000daa:	d90f      	bls.n	8000dcc <USART_IRQInterruptConfig+0x58>
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	2b3f      	cmp	r3, #63	; 0x3f
 8000db0:	d80c      	bhi.n	8000dcc <USART_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000db2:	4b2d      	ldr	r3, [pc, #180]	; (8000e68 <USART_IRQInterruptConfig+0xf4>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	79fa      	ldrb	r2, [r7, #7]
 8000db8:	f002 021f 	and.w	r2, r2, #31
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4a28      	ldr	r2, [pc, #160]	; (8000e68 <USART_IRQInterruptConfig+0xf4>)
 8000dc6:	430b      	orrs	r3, r1
 8000dc8:	6013      	str	r3, [r2, #0]
 8000dca:	e046      	b.n	8000e5a <USART_IRQInterruptConfig+0xe6>
		} else if (IRQNumber > 63 && IRQNumber < 96) {
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	2b3f      	cmp	r3, #63	; 0x3f
 8000dd0:	d943      	bls.n	8000e5a <USART_IRQInterruptConfig+0xe6>
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	2b5f      	cmp	r3, #95	; 0x5f
 8000dd6:	d840      	bhi.n	8000e5a <USART_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000dd8:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <USART_IRQInterruptConfig+0xf8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	79fa      	ldrb	r2, [r7, #7]
 8000dde:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000de2:	2101      	movs	r1, #1
 8000de4:	fa01 f202 	lsl.w	r2, r1, r2
 8000de8:	4611      	mov	r1, r2
 8000dea:	4a20      	ldr	r2, [pc, #128]	; (8000e6c <USART_IRQInterruptConfig+0xf8>)
 8000dec:	430b      	orrs	r3, r1
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	e033      	b.n	8000e5a <USART_IRQInterruptConfig+0xe6>
		if (IRQNumber < 32) {
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	2b1f      	cmp	r3, #31
 8000df6:	d80a      	bhi.n	8000e0e <USART_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000df8:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <USART_IRQInterruptConfig+0xfc>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	79fa      	ldrb	r2, [r7, #7]
 8000dfe:	2101      	movs	r1, #1
 8000e00:	fa01 f202 	lsl.w	r2, r1, r2
 8000e04:	4611      	mov	r1, r2
 8000e06:	4a1a      	ldr	r2, [pc, #104]	; (8000e70 <USART_IRQInterruptConfig+0xfc>)
 8000e08:	430b      	orrs	r3, r1
 8000e0a:	6013      	str	r3, [r2, #0]
}
 8000e0c:	e025      	b.n	8000e5a <USART_IRQInterruptConfig+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	2b1f      	cmp	r3, #31
 8000e12:	d90f      	bls.n	8000e34 <USART_IRQInterruptConfig+0xc0>
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	2b3f      	cmp	r3, #63	; 0x3f
 8000e18:	d80c      	bhi.n	8000e34 <USART_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000e1a:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <USART_IRQInterruptConfig+0x100>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	79fa      	ldrb	r2, [r7, #7]
 8000e20:	f002 021f 	and.w	r2, r2, #31
 8000e24:	2101      	movs	r1, #1
 8000e26:	fa01 f202 	lsl.w	r2, r1, r2
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4a11      	ldr	r2, [pc, #68]	; (8000e74 <USART_IRQInterruptConfig+0x100>)
 8000e2e:	430b      	orrs	r3, r1
 8000e30:	6013      	str	r3, [r2, #0]
 8000e32:	e012      	b.n	8000e5a <USART_IRQInterruptConfig+0xe6>
		} else if (IRQNumber > 63 && IRQNumber < 96) {
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	2b3f      	cmp	r3, #63	; 0x3f
 8000e38:	d90f      	bls.n	8000e5a <USART_IRQInterruptConfig+0xe6>
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	2b5f      	cmp	r3, #95	; 0x5f
 8000e3e:	d80c      	bhi.n	8000e5a <USART_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000e40:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <USART_IRQInterruptConfig+0x104>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	79fa      	ldrb	r2, [r7, #7]
 8000e46:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e50:	4611      	mov	r1, r2
 8000e52:	4a09      	ldr	r2, [pc, #36]	; (8000e78 <USART_IRQInterruptConfig+0x104>)
 8000e54:	430b      	orrs	r3, r1
 8000e56:	6013      	str	r3, [r2, #0]
}
 8000e58:	e7ff      	b.n	8000e5a <USART_IRQInterruptConfig+0xe6>
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	e000e100 	.word	0xe000e100
 8000e68:	e000e104 	.word	0xe000e104
 8000e6c:	e000e108 	.word	0xe000e108
 8000e70:	e000e180 	.word	0xe000e180
 8000e74:	e000e184 	.word	0xe000e184
 8000e78:	e000e188 	.word	0xe000e188

08000e7c <USART_IRQHandling>:
 *
 * @Note              -

 */
void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	uint32_t temp1, temp2, temp3;
	uint16_t* pdata;
	/*****************Check for TC FLAG********************/
	//Check if TC bit is set
	temp1 = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_TC);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e8e:	617b      	str	r3, [r7, #20]

	temp2 = pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_TCIE);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e9a:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2)
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d021      	beq.n	8000ee6 <USART_IRQHandling+0x6a>
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d01e      	beq.n	8000ee6 <USART_IRQHandling+0x6a>
	{
		//Close transmission and call application callback if TxLen is 0

		if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d119      	bne.n	8000ee6 <USART_IRQHandling+0x6a>
		{
			if(!pUSARTHandle->TxLen)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d115      	bne.n	8000ee6 <USART_IRQHandling+0x6a>
			{
				//The flag is cleared by writing 0 to the bit
				pUSARTHandle->pUSARTx->SR &= ~(1 << USART_SR_TC);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ec8:	601a      	str	r2, [r3, #0]

				//Reset the application state
				pUSARTHandle->TxBusyState = USART_READY;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2020 	strb.w	r2, [r3, #32]

				//Reset Buffer address to NULL
				pUSARTHandle->pTxBuffer = NULL;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]

				//Reset the length to zero
				pUSARTHandle->TxLen = 0;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	619a      	str	r2, [r3, #24]


				//Call the application call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_TX_CMPLT);
 8000ede:	2100      	movs	r1, #0
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f000 fa81 	bl	80013e8 <USART_ApplicationEventCallback>
			}
		}
	}

	/***********************Check for TXE Flag*******************/
	temp1 = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_TXE);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ef0:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_TXEIE);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000efc:	613b      	str	r3, [r7, #16]

	if (temp1 && temp2)
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d055      	beq.n	8000fb0 <USART_IRQHandling+0x134>
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d052      	beq.n	8000fb0 <USART_IRQHandling+0x134>
	{
		if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d14d      	bne.n	8000fb0 <USART_IRQHandling+0x134>
		{
			//Keep sending data untill TxLen is 0
			if(pUSARTHandle->TxLen > 0)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d03d      	beq.n	8000f98 <USART_IRQHandling+0x11c>
			{
				//Check the USART Wordlength for 8 bit or 9 bit, in one frame
				if(pUSARTHandle->USARTx_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	7b5b      	ldrb	r3, [r3, #13]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d129      	bne.n	8000f78 <USART_IRQHandling+0xfc>
				{
					//9 bit wordlength: load the DR with 2 bytes but after masking all except the first 9 bits
					pdata = (uint16_t*)pUSARTHandle->pTxBuffer;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	691b      	ldr	r3, [r3, #16]
 8000f28:	60fb      	str	r3, [r7, #12]
					pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x1FF);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	881b      	ldrh	r3, [r3, #0]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f38:	605a      	str	r2, [r3, #4]

					//check for parity enabled
					if(pUSARTHandle->USARTx_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	7b9b      	ldrb	r3, [r3, #14]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d10f      	bne.n	8000f62 <USART_IRQHandling+0xe6>
					{
						//No parity, therefore 9 bits will be transmitted. therefore remove 2 8 bit buffers
						pUSARTHandle->pTxBuffer++;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	691b      	ldr	r3, [r3, #16]
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	611a      	str	r2, [r3, #16]
						pUSARTHandle->pTxBuffer++;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	691b      	ldr	r3, [r3, #16]
 8000f50:	1c5a      	adds	r2, r3, #1
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen -=2;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	1e9a      	subs	r2, r3, #2
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	619a      	str	r2, [r3, #24]
 8000f60:	e01a      	b.n	8000f98 <USART_IRQHandling+0x11c>

					}
					else // Parity bit is used so actually 8 bits will only be sent as the 9th bit will be replaced by the parity bit

					{
						pUSARTHandle->pTxBuffer++;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	1c5a      	adds	r2, r3, #1
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen --;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	1e5a      	subs	r2, r3, #1
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	619a      	str	r2, [r3, #24]
 8000f76:	e00f      	b.n	8000f98 <USART_IRQHandling+0x11c>
					}

				}else // 8 bit frame
				{
					pUSARTHandle->pUSARTx->DR = (*pUSARTHandle->pTxBuffer & (uint8_t)0xFF);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	691b      	ldr	r3, [r3, #16]
 8000f7c:	781a      	ldrb	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
					pUSARTHandle->pTxBuffer++;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	691b      	ldr	r3, [r3, #16]
 8000f88:	1c5a      	adds	r2, r3, #1
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	611a      	str	r2, [r3, #16]
					pUSARTHandle->TxLen --;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	1e5a      	subs	r2, r3, #1
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	619a      	str	r2, [r3, #24]

				}
			}
			if (pUSARTHandle->TxLen == 0)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d107      	bne.n	8000fb0 <USART_IRQHandling+0x134>
			{
				//Implement the code to clear the TXEIE bit (disable the interrupt for TXE flag)
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_TXEIE);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	68da      	ldr	r2, [r3, #12]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fae:	60da      	str	r2, [r3, #12]

		}
	}

	/*****************Check for RXNE flag*******************************/
	temp1 = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_RXNE);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0320 	and.w	r3, r3, #32
 8000fba:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_RXNEIE);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	f003 0320 	and.w	r3, r3, #32
 8000fc6:	613b      	str	r3, [r7, #16]

	if (temp1 && temp2)
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d073      	beq.n	80010b6 <USART_IRQHandling+0x23a>
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d070      	beq.n	80010b6 <USART_IRQHandling+0x23a>
	{
		if(pUSARTHandle->RxBusyState == USART_BUSY_IN_RX)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d16b      	bne.n	80010b6 <USART_IRQHandling+0x23a>
		{
			if(pUSARTHandle->RxLen > 0)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d053      	beq.n	800108e <USART_IRQHandling+0x212>
			{
				//CHECK IF WE ARE GOING TO RECEIVE 9 BITS OF DATA OR 8 BITS
				if(pUSARTHandle->USARTx_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7b5b      	ldrb	r3, [r3, #13]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d12f      	bne.n	800104e <USART_IRQHandling+0x1d2>
				{
					//9 bits Rx enabled
					//Check the parity control
					if(pUSARTHandle->USARTx_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	7b9b      	ldrb	r3, [r3, #14]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d119      	bne.n	800102a <USART_IRQHandling+0x1ae>
					{
						//9 bits will be received
						*((uint16_t*)pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->DR & (uint16_t)0x01FF);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001006:	b292      	uxth	r2, r2
 8001008:	801a      	strh	r2, [r3, #0]
						pUSARTHandle->pRxBuffer++;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	1c5a      	adds	r2, r3, #1
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	615a      	str	r2, [r3, #20]
						pUSARTHandle->pRxBuffer++;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	695b      	ldr	r3, [r3, #20]
 8001018:	1c5a      	adds	r2, r3, #1
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	615a      	str	r2, [r3, #20]
						pUSARTHandle->RxLen -=2;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	1e9a      	subs	r2, r3, #2
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	61da      	str	r2, [r3, #28]
 8001028:	e031      	b.n	800108e <USART_IRQHandling+0x212>

					}

					else//parity is used
					{
						*(pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->DR &(uint8_t)0xFF);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	685a      	ldr	r2, [r3, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	701a      	strb	r2, [r3, #0]
						pUSARTHandle->pRxBuffer++;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	1c5a      	adds	r2, r3, #1
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	615a      	str	r2, [r3, #20]
						pUSARTHandle->RxLen -=1;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	1e5a      	subs	r2, r3, #1
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	61da      	str	r2, [r3, #28]
 800104c:	e01f      	b.n	800108e <USART_IRQHandling+0x212>

				}
				else //8 bits data will be received
				{
					//check if parity control is used
					if(pUSARTHandle->USARTx_Config.USART_ParityControl == USART_PARITY_DISABLE)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	7b9b      	ldrb	r3, [r3, #14]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d107      	bne.n	8001066 <USART_IRQHandling+0x1ea>
					{
						//No parity so 8 bits data expected
						*(pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->DR &(uint8_t)0xFF);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	701a      	strb	r2, [r3, #0]
 8001064:	e009      	b.n	800107a <USART_IRQHandling+0x1fe>
					}
					else //parity is used so 7 bits data expected
					{
						*(pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->DR &(uint8_t)0x7F);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	b2da      	uxtb	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	701a      	strb	r2, [r3, #0]
					}

					//Now increment the pointer to buffer and decrement the length
					pUSARTHandle->pRxBuffer++;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	615a      	str	r2, [r3, #20]
					pUSARTHandle->RxLen -=1;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	69db      	ldr	r3, [r3, #28]
 8001088:	1e5a      	subs	r2, r3, #1
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	61da      	str	r2, [r3, #28]
				}
			}
			if(!pUSARTHandle->RxLen)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d10f      	bne.n	80010b6 <USART_IRQHandling+0x23a>
			{
				//Disable THE rxne interrupt
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_RXNEIE);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	68da      	ldr	r2, [r3, #12]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f022 0220 	bic.w	r2, r2, #32
 80010a4:	60da      	str	r2, [r3, #12]
				pUSARTHandle->RxBusyState = USART_READY;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_RX_CMPLT);
 80010ae:	2101      	movs	r1, #1
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 f999 	bl	80013e8 <USART_ApplicationEventCallback>
	}

	/*****************************CHeck for CTS Flag**********************/
	//NOTE: CTS feature is not applicable for USART4 and USART5 peripherals

	temp1 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_SR_CTS);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010c0:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR3 & (1 << USART_CR3_CTSE);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010cc:	613b      	str	r3, [r7, #16]
	temp3 = pUSARTHandle->pUSARTx->CR3 & (1 << USART_CR3_CTSIE);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	695b      	ldr	r3, [r3, #20]
 80010d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d8:	60bb      	str	r3, [r7, #8]

	if (temp1 && temp2 && temp3)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d011      	beq.n	8001104 <USART_IRQHandling+0x288>
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00e      	beq.n	8001104 <USART_IRQHandling+0x288>
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d00b      	beq.n	8001104 <USART_IRQHandling+0x288>
	{
		//Clear the flag by writting 0 to it
		pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_CTS);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010fa:	601a      	str	r2, [r3, #0]

		//Tell the application that the interrupt was generated because of this flag
		USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_CTS);
 80010fc:	2103      	movs	r1, #3
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f972 	bl	80013e8 <USART_ApplicationEventCallback>
	}

	/****************************Check for IDLE flag*********************/
	temp1 = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_IDLE);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0310 	and.w	r3, r3, #16
 800110e:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_IDLEIE);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	f003 0310 	and.w	r3, r3, #16
 800111a:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2)
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d00c      	beq.n	800113c <USART_IRQHandling+0x2c0>
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d009      	beq.n	800113c <USART_IRQHandling+0x2c0>
	{
		//As per the RM, the flag is cleared by a read to SR (which we did just now, see above lines, and followed by a read to the DR register WHICH WE ARE NOT DOING HERE?)
		temp1 = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_IDLE);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0310 	and.w	r3, r3, #16
 8001132:	617b      	str	r3, [r7, #20]

		//Tell the application
		USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_IDLE);
 8001134:	2102      	movs	r1, #2
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f000 f956 	bl	80013e8 <USART_ApplicationEventCallback>
	}

	/********************************Check for Overrun detection flag*****************/
	temp1 = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_ORE);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_RXNEIE);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	f003 0320 	and.w	r3, r3, #32
 8001152:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2)
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d006      	beq.n	8001168 <USART_IRQHandling+0x2ec>
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <USART_IRQHandling+0x2ec>
	{
		//Tell the App which will then clear the ORE FLag
		USART_ApplicationEventCallback(pUSARTHandle, USART_ERR_ORE);
 8001160:	2107      	movs	r1, #7
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 f940 	bl	80013e8 <USART_ApplicationEventCallback>
	/*********************************Check for Error Flag********************************/
	//Noise Flag, Overrun error and Framing Error in multibuffer communication
	//We dont discuss multibuffer communication in this course. please refer to the RM
	//The below code will get executed in only if multibuffer mode is used.

		temp2 =  pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_EIE) ;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	613b      	str	r3, [r7, #16]

		if(temp2)
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d01e      	beq.n	80011b8 <USART_IRQHandling+0x33c>
		{
			temp1 = pUSARTHandle->pUSARTx->SR;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	617b      	str	r3, [r7, #20]
			if(temp1 & ( 1 << USART_SR_FE))
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <USART_IRQHandling+0x318>
				/*
					This bit is set by hardware when a de-synchronization, excessive noise or a break character
					is detected. It is cleared by a software sequence (an read to the USART_SR register
					followed by a read to the USART_DR register).
				*/
				USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_FE);
 800118c:	2105      	movs	r1, #5
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f000 f92a 	bl	80013e8 <USART_ApplicationEventCallback>
			}

			if(temp1 & ( 1 << USART_SR_NF))
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <USART_IRQHandling+0x32a>
				/*
					This bit is set by hardware when noise is detected on a received frame. It is cleared by a
					software sequence (an read to the USART_SR register followed by a read to the
					USART_DR register).
				*/
				USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_NE);
 800119e:	2106      	movs	r1, #6
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 f921 	bl	80013e8 <USART_ApplicationEventCallback>
			}

			if(temp1 & ( 1 << USART_SR_ORE) )
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	f003 0308 	and.w	r3, r3, #8
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <USART_IRQHandling+0x33c>
			{
				USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 80011b0:	2107      	movs	r1, #7
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 f918 	bl	80013e8 <USART_ApplicationEventCallback>
			}
		}


}
 80011b8:	bf00      	nop
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <USART_PeripheralControl>:
 * @return			- none
 *
 * @note			- none
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d106      	bne.n	80011e0 <USART_PeripheralControl+0x20>
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	60da      	str	r2, [r3, #12]
	} else {
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
	}
}
 80011de:	e005      	b.n	80011ec <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	60da      	str	r2, [r3, #12]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr

080011f6 <USART_GetFlagStatus>:
 * @return			- none
 *
 * @note			- none
 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx , uint32_t FlagName)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	6039      	str	r1, [r7, #0]
	if (pUSARTx->SR & FlagName) {
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	4013      	ands	r3, r2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <USART_GetFlagStatus+0x1a>
		return FLAG_SET;
 800120c:	2301      	movs	r3, #1
 800120e:	e000      	b.n	8001212 <USART_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <USART2_Init>:
uint8_t g_data = 0;

extern void initialise_monitor_handles();

void USART2_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 8001220:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <USART2_Init+0x3c>)
 8001222:	4a0e      	ldr	r2, [pc, #56]	; (800125c <USART2_Init+0x40>)
 8001224:	601a      	str	r2, [r3, #0]
	usart2_handle.USARTx_Config.USART_Baud = USART_STD_BAUD_115200;
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <USART2_Init+0x3c>)
 8001228:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800122c:	609a      	str	r2, [r3, #8]
	usart2_handle.USARTx_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <USART2_Init+0x3c>)
 8001230:	2200      	movs	r2, #0
 8001232:	73da      	strb	r2, [r3, #15]
	usart2_handle.USARTx_Config.USART_Mode = USART_MODE_TXRX;
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <USART2_Init+0x3c>)
 8001236:	2202      	movs	r2, #2
 8001238:	711a      	strb	r2, [r3, #4]
	usart2_handle.USARTx_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 800123a:	4b07      	ldr	r3, [pc, #28]	; (8001258 <USART2_Init+0x3c>)
 800123c:	2200      	movs	r2, #0
 800123e:	731a      	strb	r2, [r3, #12]
	usart2_handle.USARTx_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <USART2_Init+0x3c>)
 8001242:	2200      	movs	r2, #0
 8001244:	735a      	strb	r2, [r3, #13]
	usart2_handle.USARTx_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <USART2_Init+0x3c>)
 8001248:	2200      	movs	r2, #0
 800124a:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 800124c:	4802      	ldr	r0, [pc, #8]	; (8001258 <USART2_Init+0x3c>)
 800124e:	f7ff fc99 	bl	8000b84 <USART_Init>
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000164 	.word	0x20000164
 800125c:	40004400 	.word	0x40004400

08001260 <USART2_GPIOInit>:

void 	USART2_GPIOInit(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <USART2_GPIOInit+0x40>)
 8001268:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800126a:	2302      	movs	r3, #2
 800126c:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800126e:	2300      	movs	r3, #0
 8001270:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8001272:	2301      	movs	r3, #1
 8001274:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001276:	2302      	movs	r3, #2
 8001278:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode =7;
 800127a:	2307      	movs	r3, #7
 800127c:	737b      	strb	r3, [r7, #13]

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_2;
 800127e:	2302      	movs	r3, #2
 8001280:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f8f3 	bl	8000470 <GPIO_Init>

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 800128a:	2303      	movs	r3, #3
 800128c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f8ed 	bl	8000470 <GPIO_Init>

}
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40020000 	.word	0x40020000

080012a4 <delay>:
	GPIO_Init(&GPIOBtn);

}

void delay(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	e002      	b.n	80012b6 <delay+0x12>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3301      	adds	r3, #1
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a03      	ldr	r2, [pc, #12]	; (80012c8 <delay+0x24>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d9f8      	bls.n	80012b0 <delay+0xc>
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr
 80012c8:	0003d08f 	.word	0x0003d08f

080012cc <main>:

int main(void)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
	uint32_t cnt = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]

	initialise_monitor_handles();
 80012d6:	f001 fa97 	bl	8002808 <initialise_monitor_handles>

	USART2_GPIOInit();
 80012da:	f7ff ffc1 	bl	8001260 <USART2_GPIOInit>
    USART2_Init();
 80012de:	f7ff ff9d 	bl	800121c <USART2_Init>

    USART_IRQInterruptConfig(IRQ_NO_USART2,ENABLE);
 80012e2:	2101      	movs	r1, #1
 80012e4:	2026      	movs	r0, #38	; 0x26
 80012e6:	f7ff fd45 	bl	8000d74 <USART_IRQInterruptConfig>

    USART_PeripheralControl(USART2,ENABLE);
 80012ea:	2101      	movs	r1, #1
 80012ec:	482f      	ldr	r0, [pc, #188]	; (80013ac <main+0xe0>)
 80012ee:	f7ff ff67 	bl	80011c0 <USART_PeripheralControl>

    printf("Application is running\n");
 80012f2:	482f      	ldr	r0, [pc, #188]	; (80013b0 <main+0xe4>)
 80012f4:	f000 f988 	bl	8001608 <puts>

    //do forever
    while(1)
    {
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80012f8:	bf00      	nop
 80012fa:	2100      	movs	r1, #0
 80012fc:	482d      	ldr	r0, [pc, #180]	; (80013b4 <main+0xe8>)
 80012fe:	f7ff fa75 	bl	80007ec <GPIO_ReadFromInputPin>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d0f8      	beq.n	80012fa <main+0x2e>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8001308:	f7ff ffcc 	bl	80012a4 <delay>

		// Next message index ; make sure that cnt value doesn't cross 2
		cnt = cnt % 3;
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	4b2a      	ldr	r3, [pc, #168]	; (80013b8 <main+0xec>)
 8001310:	fba3 1302 	umull	r1, r3, r3, r2
 8001314:	0859      	lsrs	r1, r3, #1
 8001316:	460b      	mov	r3, r1
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	440b      	add	r3, r1
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	607b      	str	r3, [r7, #4]

		//First lets enable the reception in interrupt mode
		//this code enables the receive interrupt
		while ( USART_ReceiveDataIT(&usart2_handle,(uint8_t*)rx_buf,strlen(msg[cnt])) != USART_READY);
 8001320:	bf00      	nop
 8001322:	4a26      	ldr	r2, [pc, #152]	; (80013bc <main+0xf0>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132a:	4618      	mov	r0, r3
 800132c:	f7fe ff60 	bl	80001f0 <strlen>
 8001330:	4603      	mov	r3, r0
 8001332:	461a      	mov	r2, r3
 8001334:	4922      	ldr	r1, [pc, #136]	; (80013c0 <main+0xf4>)
 8001336:	4823      	ldr	r0, [pc, #140]	; (80013c4 <main+0xf8>)
 8001338:	f7ff fcf4 	bl	8000d24 <USART_ReceiveDataIT>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1ef      	bne.n	8001322 <main+0x56>

		//Send the msg indexed by cnt in blocking mode
    	USART_SendData(&usart2_handle,(uint8_t*)msg[cnt],strlen(msg[cnt]));
 8001342:	4a1e      	ldr	r2, [pc, #120]	; (80013bc <main+0xf0>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800134a:	4a1c      	ldr	r2, [pc, #112]	; (80013bc <main+0xf0>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001352:	4618      	mov	r0, r3
 8001354:	f7fe ff4c 	bl	80001f0 <strlen>
 8001358:	4603      	mov	r3, r0
 800135a:	461a      	mov	r2, r3
 800135c:	4621      	mov	r1, r4
 800135e:	4819      	ldr	r0, [pc, #100]	; (80013c4 <main+0xf8>)
 8001360:	f7ff fc93 	bl	8000c8a <USART_SendData>

    	printf("Transmitted : %s\n",msg[cnt]);
 8001364:	4a15      	ldr	r2, [pc, #84]	; (80013bc <main+0xf0>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136c:	4619      	mov	r1, r3
 800136e:	4816      	ldr	r0, [pc, #88]	; (80013c8 <main+0xfc>)
 8001370:	f000 f8d6 	bl	8001520 <iprintf>


    	//Now lets wait until all the bytes are received from the arduino .
    	//When all the bytes are received rxCmplt will be SET in application callback
    	while(rxCmplt != SET);
 8001374:	bf00      	nop
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <main+0x100>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d1fb      	bne.n	8001376 <main+0xaa>

    	//just make sure that last byte should be null otherwise %s fails while printing
    	rx_buf[strlen(msg[cnt])+ 1] = '\0';
 800137e:	4a0f      	ldr	r2, [pc, #60]	; (80013bc <main+0xf0>)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001386:	4618      	mov	r0, r3
 8001388:	f7fe ff32 	bl	80001f0 <strlen>
 800138c:	4603      	mov	r3, r0
 800138e:	3301      	adds	r3, #1
 8001390:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <main+0xf4>)
 8001392:	2100      	movs	r1, #0
 8001394:	54d1      	strb	r1, [r2, r3]

    	//Print what we received from the arduino
    	printf("Received    : %s\n",rx_buf);
 8001396:	490a      	ldr	r1, [pc, #40]	; (80013c0 <main+0xf4>)
 8001398:	480d      	ldr	r0, [pc, #52]	; (80013d0 <main+0x104>)
 800139a:	f000 f8c1 	bl	8001520 <iprintf>

    	//invalidate the flag
    	rxCmplt = RESET;
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <main+0x100>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]

    	//move on to next message indexed in msg[]
    	cnt ++;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3301      	adds	r3, #1
 80013a8:	607b      	str	r3, [r7, #4]
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80013aa:	e7a5      	b.n	80012f8 <main+0x2c>
 80013ac:	40004400 	.word	0x40004400
 80013b0:	0800294c 	.word	0x0800294c
 80013b4:	40020000 	.word	0x40020000
 80013b8:	aaaaaaab 	.word	0xaaaaaaab
 80013bc:	20000014 	.word	0x20000014
 80013c0:	20000188 	.word	0x20000188
 80013c4:	20000164 	.word	0x20000164
 80013c8:	08002964 	.word	0x08002964
 80013cc:	200000a8 	.word	0x200000a8
 80013d0:	08002978 	.word	0x08002978

080013d4 <USART2_IRQHandler>:
	return 0;
}


void USART2_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	USART_IRQHandling(&usart2_handle);
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <USART2_IRQHandler+0x10>)
 80013da:	f7ff fd4f 	bl	8000e7c <USART_IRQHandling>
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000164 	.word	0x20000164

080013e8 <USART_ApplicationEventCallback>:



void USART_ApplicationEventCallback( USART_Handle_t *pUSARTHandle,uint8_t ApEv)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	70fb      	strb	r3, [r7, #3]
   if(ApEv == USART_EVENT_RX_CMPLT)
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d102      	bne.n	8001400 <USART_ApplicationEventCallback+0x18>
   {
			rxCmplt = SET;
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <USART_ApplicationEventCallback+0x24>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	701a      	strb	r2, [r3, #0]

   }else if (ApEv == USART_EVENT_TX_CMPLT)
   {
	   ;
   }
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	200000a8 	.word	0x200000a8

08001410 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <_sbrk+0x50>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d102      	bne.n	8001426 <_sbrk+0x16>
		heap_end = &end;
 8001420:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <_sbrk+0x50>)
 8001422:	4a10      	ldr	r2, [pc, #64]	; (8001464 <_sbrk+0x54>)
 8001424:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <_sbrk+0x50>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <_sbrk+0x50>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4413      	add	r3, r2
 8001434:	466a      	mov	r2, sp
 8001436:	4293      	cmp	r3, r2
 8001438:	d907      	bls.n	800144a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800143a:	f000 f83f 	bl	80014bc <__errno>
 800143e:	4602      	mov	r2, r0
 8001440:	230c      	movs	r3, #12
 8001442:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001444:	f04f 33ff 	mov.w	r3, #4294967295
 8001448:	e006      	b.n	8001458 <_sbrk+0x48>
	}

	heap_end += incr;
 800144a:	4b05      	ldr	r3, [pc, #20]	; (8001460 <_sbrk+0x50>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	4a03      	ldr	r2, [pc, #12]	; (8001460 <_sbrk+0x50>)
 8001454:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001456:	68fb      	ldr	r3, [r7, #12]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	200000ac 	.word	0x200000ac
 8001464:	20000590 	.word	0x20000590

08001468 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001468:	480d      	ldr	r0, [pc, #52]	; (80014a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800146a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800146c:	480d      	ldr	r0, [pc, #52]	; (80014a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800146e:	490e      	ldr	r1, [pc, #56]	; (80014a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001470:	4a0e      	ldr	r2, [pc, #56]	; (80014ac <LoopForever+0xe>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001474:	e002      	b.n	800147c <LoopCopyDataInit>

08001476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147a:	3304      	adds	r3, #4

0800147c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800147c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001480:	d3f9      	bcc.n	8001476 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001482:	4a0b      	ldr	r2, [pc, #44]	; (80014b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001484:	4c0b      	ldr	r4, [pc, #44]	; (80014b4 <LoopForever+0x16>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001488:	e001      	b.n	800148e <LoopFillZerobss>

0800148a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800148c:	3204      	adds	r2, #4

0800148e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001490:	d3fb      	bcc.n	800148a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001492:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8001496:	f000 f817 	bl	80014c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800149a:	f7ff ff17 	bl	80012cc <main>

0800149e <LoopForever>:

LoopForever:
    b LoopForever
 800149e:	e7fe      	b.n	800149e <LoopForever>
  ldr   r0, =_estack
 80014a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80014ac:	08002a48 	.word	0x08002a48
  ldr r2, =_sbss
 80014b0:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80014b4:	2000058c 	.word	0x2000058c

080014b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014b8:	e7fe      	b.n	80014b8 <ADC_IRQHandler>
	...

080014bc <__errno>:
 80014bc:	4b01      	ldr	r3, [pc, #4]	; (80014c4 <__errno+0x8>)
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000020 	.word	0x20000020

080014c8 <__libc_init_array>:
 80014c8:	b570      	push	{r4, r5, r6, lr}
 80014ca:	4e0d      	ldr	r6, [pc, #52]	; (8001500 <__libc_init_array+0x38>)
 80014cc:	4c0d      	ldr	r4, [pc, #52]	; (8001504 <__libc_init_array+0x3c>)
 80014ce:	1ba4      	subs	r4, r4, r6
 80014d0:	10a4      	asrs	r4, r4, #2
 80014d2:	2500      	movs	r5, #0
 80014d4:	42a5      	cmp	r5, r4
 80014d6:	d109      	bne.n	80014ec <__libc_init_array+0x24>
 80014d8:	4e0b      	ldr	r6, [pc, #44]	; (8001508 <__libc_init_array+0x40>)
 80014da:	4c0c      	ldr	r4, [pc, #48]	; (800150c <__libc_init_array+0x44>)
 80014dc:	f001 fa0e 	bl	80028fc <_init>
 80014e0:	1ba4      	subs	r4, r4, r6
 80014e2:	10a4      	asrs	r4, r4, #2
 80014e4:	2500      	movs	r5, #0
 80014e6:	42a5      	cmp	r5, r4
 80014e8:	d105      	bne.n	80014f6 <__libc_init_array+0x2e>
 80014ea:	bd70      	pop	{r4, r5, r6, pc}
 80014ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014f0:	4798      	blx	r3
 80014f2:	3501      	adds	r5, #1
 80014f4:	e7ee      	b.n	80014d4 <__libc_init_array+0xc>
 80014f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014fa:	4798      	blx	r3
 80014fc:	3501      	adds	r5, #1
 80014fe:	e7f2      	b.n	80014e6 <__libc_init_array+0x1e>
 8001500:	08002a40 	.word	0x08002a40
 8001504:	08002a40 	.word	0x08002a40
 8001508:	08002a40 	.word	0x08002a40
 800150c:	08002a44 	.word	0x08002a44

08001510 <memset>:
 8001510:	4402      	add	r2, r0
 8001512:	4603      	mov	r3, r0
 8001514:	4293      	cmp	r3, r2
 8001516:	d100      	bne.n	800151a <memset+0xa>
 8001518:	4770      	bx	lr
 800151a:	f803 1b01 	strb.w	r1, [r3], #1
 800151e:	e7f9      	b.n	8001514 <memset+0x4>

08001520 <iprintf>:
 8001520:	b40f      	push	{r0, r1, r2, r3}
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <iprintf+0x2c>)
 8001524:	b513      	push	{r0, r1, r4, lr}
 8001526:	681c      	ldr	r4, [r3, #0]
 8001528:	b124      	cbz	r4, 8001534 <iprintf+0x14>
 800152a:	69a3      	ldr	r3, [r4, #24]
 800152c:	b913      	cbnz	r3, 8001534 <iprintf+0x14>
 800152e:	4620      	mov	r0, r4
 8001530:	f000 fa22 	bl	8001978 <__sinit>
 8001534:	ab05      	add	r3, sp, #20
 8001536:	9a04      	ldr	r2, [sp, #16]
 8001538:	68a1      	ldr	r1, [r4, #8]
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	4620      	mov	r0, r4
 800153e:	f000 fbd9 	bl	8001cf4 <_vfiprintf_r>
 8001542:	b002      	add	sp, #8
 8001544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001548:	b004      	add	sp, #16
 800154a:	4770      	bx	lr
 800154c:	20000020 	.word	0x20000020

08001550 <_puts_r>:
 8001550:	b570      	push	{r4, r5, r6, lr}
 8001552:	460e      	mov	r6, r1
 8001554:	4605      	mov	r5, r0
 8001556:	b118      	cbz	r0, 8001560 <_puts_r+0x10>
 8001558:	6983      	ldr	r3, [r0, #24]
 800155a:	b90b      	cbnz	r3, 8001560 <_puts_r+0x10>
 800155c:	f000 fa0c 	bl	8001978 <__sinit>
 8001560:	69ab      	ldr	r3, [r5, #24]
 8001562:	68ac      	ldr	r4, [r5, #8]
 8001564:	b913      	cbnz	r3, 800156c <_puts_r+0x1c>
 8001566:	4628      	mov	r0, r5
 8001568:	f000 fa06 	bl	8001978 <__sinit>
 800156c:	4b23      	ldr	r3, [pc, #140]	; (80015fc <_puts_r+0xac>)
 800156e:	429c      	cmp	r4, r3
 8001570:	d117      	bne.n	80015a2 <_puts_r+0x52>
 8001572:	686c      	ldr	r4, [r5, #4]
 8001574:	89a3      	ldrh	r3, [r4, #12]
 8001576:	071b      	lsls	r3, r3, #28
 8001578:	d51d      	bpl.n	80015b6 <_puts_r+0x66>
 800157a:	6923      	ldr	r3, [r4, #16]
 800157c:	b1db      	cbz	r3, 80015b6 <_puts_r+0x66>
 800157e:	3e01      	subs	r6, #1
 8001580:	68a3      	ldr	r3, [r4, #8]
 8001582:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001586:	3b01      	subs	r3, #1
 8001588:	60a3      	str	r3, [r4, #8]
 800158a:	b9e9      	cbnz	r1, 80015c8 <_puts_r+0x78>
 800158c:	2b00      	cmp	r3, #0
 800158e:	da2e      	bge.n	80015ee <_puts_r+0x9e>
 8001590:	4622      	mov	r2, r4
 8001592:	210a      	movs	r1, #10
 8001594:	4628      	mov	r0, r5
 8001596:	f000 f83f 	bl	8001618 <__swbuf_r>
 800159a:	3001      	adds	r0, #1
 800159c:	d011      	beq.n	80015c2 <_puts_r+0x72>
 800159e:	200a      	movs	r0, #10
 80015a0:	e011      	b.n	80015c6 <_puts_r+0x76>
 80015a2:	4b17      	ldr	r3, [pc, #92]	; (8001600 <_puts_r+0xb0>)
 80015a4:	429c      	cmp	r4, r3
 80015a6:	d101      	bne.n	80015ac <_puts_r+0x5c>
 80015a8:	68ac      	ldr	r4, [r5, #8]
 80015aa:	e7e3      	b.n	8001574 <_puts_r+0x24>
 80015ac:	4b15      	ldr	r3, [pc, #84]	; (8001604 <_puts_r+0xb4>)
 80015ae:	429c      	cmp	r4, r3
 80015b0:	bf08      	it	eq
 80015b2:	68ec      	ldreq	r4, [r5, #12]
 80015b4:	e7de      	b.n	8001574 <_puts_r+0x24>
 80015b6:	4621      	mov	r1, r4
 80015b8:	4628      	mov	r0, r5
 80015ba:	f000 f87f 	bl	80016bc <__swsetup_r>
 80015be:	2800      	cmp	r0, #0
 80015c0:	d0dd      	beq.n	800157e <_puts_r+0x2e>
 80015c2:	f04f 30ff 	mov.w	r0, #4294967295
 80015c6:	bd70      	pop	{r4, r5, r6, pc}
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	da04      	bge.n	80015d6 <_puts_r+0x86>
 80015cc:	69a2      	ldr	r2, [r4, #24]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	dc06      	bgt.n	80015e0 <_puts_r+0x90>
 80015d2:	290a      	cmp	r1, #10
 80015d4:	d004      	beq.n	80015e0 <_puts_r+0x90>
 80015d6:	6823      	ldr	r3, [r4, #0]
 80015d8:	1c5a      	adds	r2, r3, #1
 80015da:	6022      	str	r2, [r4, #0]
 80015dc:	7019      	strb	r1, [r3, #0]
 80015de:	e7cf      	b.n	8001580 <_puts_r+0x30>
 80015e0:	4622      	mov	r2, r4
 80015e2:	4628      	mov	r0, r5
 80015e4:	f000 f818 	bl	8001618 <__swbuf_r>
 80015e8:	3001      	adds	r0, #1
 80015ea:	d1c9      	bne.n	8001580 <_puts_r+0x30>
 80015ec:	e7e9      	b.n	80015c2 <_puts_r+0x72>
 80015ee:	6823      	ldr	r3, [r4, #0]
 80015f0:	200a      	movs	r0, #10
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	6022      	str	r2, [r4, #0]
 80015f6:	7018      	strb	r0, [r3, #0]
 80015f8:	e7e5      	b.n	80015c6 <_puts_r+0x76>
 80015fa:	bf00      	nop
 80015fc:	080029b0 	.word	0x080029b0
 8001600:	080029d0 	.word	0x080029d0
 8001604:	08002990 	.word	0x08002990

08001608 <puts>:
 8001608:	4b02      	ldr	r3, [pc, #8]	; (8001614 <puts+0xc>)
 800160a:	4601      	mov	r1, r0
 800160c:	6818      	ldr	r0, [r3, #0]
 800160e:	f7ff bf9f 	b.w	8001550 <_puts_r>
 8001612:	bf00      	nop
 8001614:	20000020 	.word	0x20000020

08001618 <__swbuf_r>:
 8001618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800161a:	460e      	mov	r6, r1
 800161c:	4614      	mov	r4, r2
 800161e:	4605      	mov	r5, r0
 8001620:	b118      	cbz	r0, 800162a <__swbuf_r+0x12>
 8001622:	6983      	ldr	r3, [r0, #24]
 8001624:	b90b      	cbnz	r3, 800162a <__swbuf_r+0x12>
 8001626:	f000 f9a7 	bl	8001978 <__sinit>
 800162a:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <__swbuf_r+0x98>)
 800162c:	429c      	cmp	r4, r3
 800162e:	d12a      	bne.n	8001686 <__swbuf_r+0x6e>
 8001630:	686c      	ldr	r4, [r5, #4]
 8001632:	69a3      	ldr	r3, [r4, #24]
 8001634:	60a3      	str	r3, [r4, #8]
 8001636:	89a3      	ldrh	r3, [r4, #12]
 8001638:	071a      	lsls	r2, r3, #28
 800163a:	d52e      	bpl.n	800169a <__swbuf_r+0x82>
 800163c:	6923      	ldr	r3, [r4, #16]
 800163e:	b363      	cbz	r3, 800169a <__swbuf_r+0x82>
 8001640:	6923      	ldr	r3, [r4, #16]
 8001642:	6820      	ldr	r0, [r4, #0]
 8001644:	1ac0      	subs	r0, r0, r3
 8001646:	6963      	ldr	r3, [r4, #20]
 8001648:	b2f6      	uxtb	r6, r6
 800164a:	4283      	cmp	r3, r0
 800164c:	4637      	mov	r7, r6
 800164e:	dc04      	bgt.n	800165a <__swbuf_r+0x42>
 8001650:	4621      	mov	r1, r4
 8001652:	4628      	mov	r0, r5
 8001654:	f000 f926 	bl	80018a4 <_fflush_r>
 8001658:	bb28      	cbnz	r0, 80016a6 <__swbuf_r+0x8e>
 800165a:	68a3      	ldr	r3, [r4, #8]
 800165c:	3b01      	subs	r3, #1
 800165e:	60a3      	str	r3, [r4, #8]
 8001660:	6823      	ldr	r3, [r4, #0]
 8001662:	1c5a      	adds	r2, r3, #1
 8001664:	6022      	str	r2, [r4, #0]
 8001666:	701e      	strb	r6, [r3, #0]
 8001668:	6963      	ldr	r3, [r4, #20]
 800166a:	3001      	adds	r0, #1
 800166c:	4283      	cmp	r3, r0
 800166e:	d004      	beq.n	800167a <__swbuf_r+0x62>
 8001670:	89a3      	ldrh	r3, [r4, #12]
 8001672:	07db      	lsls	r3, r3, #31
 8001674:	d519      	bpl.n	80016aa <__swbuf_r+0x92>
 8001676:	2e0a      	cmp	r6, #10
 8001678:	d117      	bne.n	80016aa <__swbuf_r+0x92>
 800167a:	4621      	mov	r1, r4
 800167c:	4628      	mov	r0, r5
 800167e:	f000 f911 	bl	80018a4 <_fflush_r>
 8001682:	b190      	cbz	r0, 80016aa <__swbuf_r+0x92>
 8001684:	e00f      	b.n	80016a6 <__swbuf_r+0x8e>
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <__swbuf_r+0x9c>)
 8001688:	429c      	cmp	r4, r3
 800168a:	d101      	bne.n	8001690 <__swbuf_r+0x78>
 800168c:	68ac      	ldr	r4, [r5, #8]
 800168e:	e7d0      	b.n	8001632 <__swbuf_r+0x1a>
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <__swbuf_r+0xa0>)
 8001692:	429c      	cmp	r4, r3
 8001694:	bf08      	it	eq
 8001696:	68ec      	ldreq	r4, [r5, #12]
 8001698:	e7cb      	b.n	8001632 <__swbuf_r+0x1a>
 800169a:	4621      	mov	r1, r4
 800169c:	4628      	mov	r0, r5
 800169e:	f000 f80d 	bl	80016bc <__swsetup_r>
 80016a2:	2800      	cmp	r0, #0
 80016a4:	d0cc      	beq.n	8001640 <__swbuf_r+0x28>
 80016a6:	f04f 37ff 	mov.w	r7, #4294967295
 80016aa:	4638      	mov	r0, r7
 80016ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016ae:	bf00      	nop
 80016b0:	080029b0 	.word	0x080029b0
 80016b4:	080029d0 	.word	0x080029d0
 80016b8:	08002990 	.word	0x08002990

080016bc <__swsetup_r>:
 80016bc:	4b32      	ldr	r3, [pc, #200]	; (8001788 <__swsetup_r+0xcc>)
 80016be:	b570      	push	{r4, r5, r6, lr}
 80016c0:	681d      	ldr	r5, [r3, #0]
 80016c2:	4606      	mov	r6, r0
 80016c4:	460c      	mov	r4, r1
 80016c6:	b125      	cbz	r5, 80016d2 <__swsetup_r+0x16>
 80016c8:	69ab      	ldr	r3, [r5, #24]
 80016ca:	b913      	cbnz	r3, 80016d2 <__swsetup_r+0x16>
 80016cc:	4628      	mov	r0, r5
 80016ce:	f000 f953 	bl	8001978 <__sinit>
 80016d2:	4b2e      	ldr	r3, [pc, #184]	; (800178c <__swsetup_r+0xd0>)
 80016d4:	429c      	cmp	r4, r3
 80016d6:	d10f      	bne.n	80016f8 <__swsetup_r+0x3c>
 80016d8:	686c      	ldr	r4, [r5, #4]
 80016da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016de:	b29a      	uxth	r2, r3
 80016e0:	0715      	lsls	r5, r2, #28
 80016e2:	d42c      	bmi.n	800173e <__swsetup_r+0x82>
 80016e4:	06d0      	lsls	r0, r2, #27
 80016e6:	d411      	bmi.n	800170c <__swsetup_r+0x50>
 80016e8:	2209      	movs	r2, #9
 80016ea:	6032      	str	r2, [r6, #0]
 80016ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016f0:	81a3      	strh	r3, [r4, #12]
 80016f2:	f04f 30ff 	mov.w	r0, #4294967295
 80016f6:	e03e      	b.n	8001776 <__swsetup_r+0xba>
 80016f8:	4b25      	ldr	r3, [pc, #148]	; (8001790 <__swsetup_r+0xd4>)
 80016fa:	429c      	cmp	r4, r3
 80016fc:	d101      	bne.n	8001702 <__swsetup_r+0x46>
 80016fe:	68ac      	ldr	r4, [r5, #8]
 8001700:	e7eb      	b.n	80016da <__swsetup_r+0x1e>
 8001702:	4b24      	ldr	r3, [pc, #144]	; (8001794 <__swsetup_r+0xd8>)
 8001704:	429c      	cmp	r4, r3
 8001706:	bf08      	it	eq
 8001708:	68ec      	ldreq	r4, [r5, #12]
 800170a:	e7e6      	b.n	80016da <__swsetup_r+0x1e>
 800170c:	0751      	lsls	r1, r2, #29
 800170e:	d512      	bpl.n	8001736 <__swsetup_r+0x7a>
 8001710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001712:	b141      	cbz	r1, 8001726 <__swsetup_r+0x6a>
 8001714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001718:	4299      	cmp	r1, r3
 800171a:	d002      	beq.n	8001722 <__swsetup_r+0x66>
 800171c:	4630      	mov	r0, r6
 800171e:	f000 fa19 	bl	8001b54 <_free_r>
 8001722:	2300      	movs	r3, #0
 8001724:	6363      	str	r3, [r4, #52]	; 0x34
 8001726:	89a3      	ldrh	r3, [r4, #12]
 8001728:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800172c:	81a3      	strh	r3, [r4, #12]
 800172e:	2300      	movs	r3, #0
 8001730:	6063      	str	r3, [r4, #4]
 8001732:	6923      	ldr	r3, [r4, #16]
 8001734:	6023      	str	r3, [r4, #0]
 8001736:	89a3      	ldrh	r3, [r4, #12]
 8001738:	f043 0308 	orr.w	r3, r3, #8
 800173c:	81a3      	strh	r3, [r4, #12]
 800173e:	6923      	ldr	r3, [r4, #16]
 8001740:	b94b      	cbnz	r3, 8001756 <__swsetup_r+0x9a>
 8001742:	89a3      	ldrh	r3, [r4, #12]
 8001744:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800174c:	d003      	beq.n	8001756 <__swsetup_r+0x9a>
 800174e:	4621      	mov	r1, r4
 8001750:	4630      	mov	r0, r6
 8001752:	f000 f9bf 	bl	8001ad4 <__smakebuf_r>
 8001756:	89a2      	ldrh	r2, [r4, #12]
 8001758:	f012 0301 	ands.w	r3, r2, #1
 800175c:	d00c      	beq.n	8001778 <__swsetup_r+0xbc>
 800175e:	2300      	movs	r3, #0
 8001760:	60a3      	str	r3, [r4, #8]
 8001762:	6963      	ldr	r3, [r4, #20]
 8001764:	425b      	negs	r3, r3
 8001766:	61a3      	str	r3, [r4, #24]
 8001768:	6923      	ldr	r3, [r4, #16]
 800176a:	b953      	cbnz	r3, 8001782 <__swsetup_r+0xc6>
 800176c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001770:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001774:	d1ba      	bne.n	80016ec <__swsetup_r+0x30>
 8001776:	bd70      	pop	{r4, r5, r6, pc}
 8001778:	0792      	lsls	r2, r2, #30
 800177a:	bf58      	it	pl
 800177c:	6963      	ldrpl	r3, [r4, #20]
 800177e:	60a3      	str	r3, [r4, #8]
 8001780:	e7f2      	b.n	8001768 <__swsetup_r+0xac>
 8001782:	2000      	movs	r0, #0
 8001784:	e7f7      	b.n	8001776 <__swsetup_r+0xba>
 8001786:	bf00      	nop
 8001788:	20000020 	.word	0x20000020
 800178c:	080029b0 	.word	0x080029b0
 8001790:	080029d0 	.word	0x080029d0
 8001794:	08002990 	.word	0x08002990

08001798 <__sflush_r>:
 8001798:	898a      	ldrh	r2, [r1, #12]
 800179a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800179e:	4605      	mov	r5, r0
 80017a0:	0710      	lsls	r0, r2, #28
 80017a2:	460c      	mov	r4, r1
 80017a4:	d458      	bmi.n	8001858 <__sflush_r+0xc0>
 80017a6:	684b      	ldr	r3, [r1, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	dc05      	bgt.n	80017b8 <__sflush_r+0x20>
 80017ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	dc02      	bgt.n	80017b8 <__sflush_r+0x20>
 80017b2:	2000      	movs	r0, #0
 80017b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017ba:	2e00      	cmp	r6, #0
 80017bc:	d0f9      	beq.n	80017b2 <__sflush_r+0x1a>
 80017be:	2300      	movs	r3, #0
 80017c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80017c4:	682f      	ldr	r7, [r5, #0]
 80017c6:	6a21      	ldr	r1, [r4, #32]
 80017c8:	602b      	str	r3, [r5, #0]
 80017ca:	d032      	beq.n	8001832 <__sflush_r+0x9a>
 80017cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80017ce:	89a3      	ldrh	r3, [r4, #12]
 80017d0:	075a      	lsls	r2, r3, #29
 80017d2:	d505      	bpl.n	80017e0 <__sflush_r+0x48>
 80017d4:	6863      	ldr	r3, [r4, #4]
 80017d6:	1ac0      	subs	r0, r0, r3
 80017d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80017da:	b10b      	cbz	r3, 80017e0 <__sflush_r+0x48>
 80017dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017de:	1ac0      	subs	r0, r0, r3
 80017e0:	2300      	movs	r3, #0
 80017e2:	4602      	mov	r2, r0
 80017e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017e6:	6a21      	ldr	r1, [r4, #32]
 80017e8:	4628      	mov	r0, r5
 80017ea:	47b0      	blx	r6
 80017ec:	1c43      	adds	r3, r0, #1
 80017ee:	89a3      	ldrh	r3, [r4, #12]
 80017f0:	d106      	bne.n	8001800 <__sflush_r+0x68>
 80017f2:	6829      	ldr	r1, [r5, #0]
 80017f4:	291d      	cmp	r1, #29
 80017f6:	d848      	bhi.n	800188a <__sflush_r+0xf2>
 80017f8:	4a29      	ldr	r2, [pc, #164]	; (80018a0 <__sflush_r+0x108>)
 80017fa:	40ca      	lsrs	r2, r1
 80017fc:	07d6      	lsls	r6, r2, #31
 80017fe:	d544      	bpl.n	800188a <__sflush_r+0xf2>
 8001800:	2200      	movs	r2, #0
 8001802:	6062      	str	r2, [r4, #4]
 8001804:	04d9      	lsls	r1, r3, #19
 8001806:	6922      	ldr	r2, [r4, #16]
 8001808:	6022      	str	r2, [r4, #0]
 800180a:	d504      	bpl.n	8001816 <__sflush_r+0x7e>
 800180c:	1c42      	adds	r2, r0, #1
 800180e:	d101      	bne.n	8001814 <__sflush_r+0x7c>
 8001810:	682b      	ldr	r3, [r5, #0]
 8001812:	b903      	cbnz	r3, 8001816 <__sflush_r+0x7e>
 8001814:	6560      	str	r0, [r4, #84]	; 0x54
 8001816:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001818:	602f      	str	r7, [r5, #0]
 800181a:	2900      	cmp	r1, #0
 800181c:	d0c9      	beq.n	80017b2 <__sflush_r+0x1a>
 800181e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001822:	4299      	cmp	r1, r3
 8001824:	d002      	beq.n	800182c <__sflush_r+0x94>
 8001826:	4628      	mov	r0, r5
 8001828:	f000 f994 	bl	8001b54 <_free_r>
 800182c:	2000      	movs	r0, #0
 800182e:	6360      	str	r0, [r4, #52]	; 0x34
 8001830:	e7c0      	b.n	80017b4 <__sflush_r+0x1c>
 8001832:	2301      	movs	r3, #1
 8001834:	4628      	mov	r0, r5
 8001836:	47b0      	blx	r6
 8001838:	1c41      	adds	r1, r0, #1
 800183a:	d1c8      	bne.n	80017ce <__sflush_r+0x36>
 800183c:	682b      	ldr	r3, [r5, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0c5      	beq.n	80017ce <__sflush_r+0x36>
 8001842:	2b1d      	cmp	r3, #29
 8001844:	d001      	beq.n	800184a <__sflush_r+0xb2>
 8001846:	2b16      	cmp	r3, #22
 8001848:	d101      	bne.n	800184e <__sflush_r+0xb6>
 800184a:	602f      	str	r7, [r5, #0]
 800184c:	e7b1      	b.n	80017b2 <__sflush_r+0x1a>
 800184e:	89a3      	ldrh	r3, [r4, #12]
 8001850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001854:	81a3      	strh	r3, [r4, #12]
 8001856:	e7ad      	b.n	80017b4 <__sflush_r+0x1c>
 8001858:	690f      	ldr	r7, [r1, #16]
 800185a:	2f00      	cmp	r7, #0
 800185c:	d0a9      	beq.n	80017b2 <__sflush_r+0x1a>
 800185e:	0793      	lsls	r3, r2, #30
 8001860:	680e      	ldr	r6, [r1, #0]
 8001862:	bf08      	it	eq
 8001864:	694b      	ldreq	r3, [r1, #20]
 8001866:	600f      	str	r7, [r1, #0]
 8001868:	bf18      	it	ne
 800186a:	2300      	movne	r3, #0
 800186c:	eba6 0807 	sub.w	r8, r6, r7
 8001870:	608b      	str	r3, [r1, #8]
 8001872:	f1b8 0f00 	cmp.w	r8, #0
 8001876:	dd9c      	ble.n	80017b2 <__sflush_r+0x1a>
 8001878:	4643      	mov	r3, r8
 800187a:	463a      	mov	r2, r7
 800187c:	6a21      	ldr	r1, [r4, #32]
 800187e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001880:	4628      	mov	r0, r5
 8001882:	47b0      	blx	r6
 8001884:	2800      	cmp	r0, #0
 8001886:	dc06      	bgt.n	8001896 <__sflush_r+0xfe>
 8001888:	89a3      	ldrh	r3, [r4, #12]
 800188a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800188e:	81a3      	strh	r3, [r4, #12]
 8001890:	f04f 30ff 	mov.w	r0, #4294967295
 8001894:	e78e      	b.n	80017b4 <__sflush_r+0x1c>
 8001896:	4407      	add	r7, r0
 8001898:	eba8 0800 	sub.w	r8, r8, r0
 800189c:	e7e9      	b.n	8001872 <__sflush_r+0xda>
 800189e:	bf00      	nop
 80018a0:	20400001 	.word	0x20400001

080018a4 <_fflush_r>:
 80018a4:	b538      	push	{r3, r4, r5, lr}
 80018a6:	690b      	ldr	r3, [r1, #16]
 80018a8:	4605      	mov	r5, r0
 80018aa:	460c      	mov	r4, r1
 80018ac:	b1db      	cbz	r3, 80018e6 <_fflush_r+0x42>
 80018ae:	b118      	cbz	r0, 80018b8 <_fflush_r+0x14>
 80018b0:	6983      	ldr	r3, [r0, #24]
 80018b2:	b90b      	cbnz	r3, 80018b8 <_fflush_r+0x14>
 80018b4:	f000 f860 	bl	8001978 <__sinit>
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <_fflush_r+0x48>)
 80018ba:	429c      	cmp	r4, r3
 80018bc:	d109      	bne.n	80018d2 <_fflush_r+0x2e>
 80018be:	686c      	ldr	r4, [r5, #4]
 80018c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018c4:	b17b      	cbz	r3, 80018e6 <_fflush_r+0x42>
 80018c6:	4621      	mov	r1, r4
 80018c8:	4628      	mov	r0, r5
 80018ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018ce:	f7ff bf63 	b.w	8001798 <__sflush_r>
 80018d2:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <_fflush_r+0x4c>)
 80018d4:	429c      	cmp	r4, r3
 80018d6:	d101      	bne.n	80018dc <_fflush_r+0x38>
 80018d8:	68ac      	ldr	r4, [r5, #8]
 80018da:	e7f1      	b.n	80018c0 <_fflush_r+0x1c>
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <_fflush_r+0x50>)
 80018de:	429c      	cmp	r4, r3
 80018e0:	bf08      	it	eq
 80018e2:	68ec      	ldreq	r4, [r5, #12]
 80018e4:	e7ec      	b.n	80018c0 <_fflush_r+0x1c>
 80018e6:	2000      	movs	r0, #0
 80018e8:	bd38      	pop	{r3, r4, r5, pc}
 80018ea:	bf00      	nop
 80018ec:	080029b0 	.word	0x080029b0
 80018f0:	080029d0 	.word	0x080029d0
 80018f4:	08002990 	.word	0x08002990

080018f8 <std>:
 80018f8:	2300      	movs	r3, #0
 80018fa:	b510      	push	{r4, lr}
 80018fc:	4604      	mov	r4, r0
 80018fe:	e9c0 3300 	strd	r3, r3, [r0]
 8001902:	6083      	str	r3, [r0, #8]
 8001904:	8181      	strh	r1, [r0, #12]
 8001906:	6643      	str	r3, [r0, #100]	; 0x64
 8001908:	81c2      	strh	r2, [r0, #14]
 800190a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800190e:	6183      	str	r3, [r0, #24]
 8001910:	4619      	mov	r1, r3
 8001912:	2208      	movs	r2, #8
 8001914:	305c      	adds	r0, #92	; 0x5c
 8001916:	f7ff fdfb 	bl	8001510 <memset>
 800191a:	4b05      	ldr	r3, [pc, #20]	; (8001930 <std+0x38>)
 800191c:	6263      	str	r3, [r4, #36]	; 0x24
 800191e:	4b05      	ldr	r3, [pc, #20]	; (8001934 <std+0x3c>)
 8001920:	62a3      	str	r3, [r4, #40]	; 0x28
 8001922:	4b05      	ldr	r3, [pc, #20]	; (8001938 <std+0x40>)
 8001924:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <std+0x44>)
 8001928:	6224      	str	r4, [r4, #32]
 800192a:	6323      	str	r3, [r4, #48]	; 0x30
 800192c:	bd10      	pop	{r4, pc}
 800192e:	bf00      	nop
 8001930:	08002251 	.word	0x08002251
 8001934:	08002273 	.word	0x08002273
 8001938:	080022ab 	.word	0x080022ab
 800193c:	080022cf 	.word	0x080022cf

08001940 <_cleanup_r>:
 8001940:	4901      	ldr	r1, [pc, #4]	; (8001948 <_cleanup_r+0x8>)
 8001942:	f000 b885 	b.w	8001a50 <_fwalk_reent>
 8001946:	bf00      	nop
 8001948:	080018a5 	.word	0x080018a5

0800194c <__sfmoreglue>:
 800194c:	b570      	push	{r4, r5, r6, lr}
 800194e:	1e4a      	subs	r2, r1, #1
 8001950:	2568      	movs	r5, #104	; 0x68
 8001952:	4355      	muls	r5, r2
 8001954:	460e      	mov	r6, r1
 8001956:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800195a:	f000 f949 	bl	8001bf0 <_malloc_r>
 800195e:	4604      	mov	r4, r0
 8001960:	b140      	cbz	r0, 8001974 <__sfmoreglue+0x28>
 8001962:	2100      	movs	r1, #0
 8001964:	e9c0 1600 	strd	r1, r6, [r0]
 8001968:	300c      	adds	r0, #12
 800196a:	60a0      	str	r0, [r4, #8]
 800196c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001970:	f7ff fdce 	bl	8001510 <memset>
 8001974:	4620      	mov	r0, r4
 8001976:	bd70      	pop	{r4, r5, r6, pc}

08001978 <__sinit>:
 8001978:	6983      	ldr	r3, [r0, #24]
 800197a:	b510      	push	{r4, lr}
 800197c:	4604      	mov	r4, r0
 800197e:	bb33      	cbnz	r3, 80019ce <__sinit+0x56>
 8001980:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001984:	6503      	str	r3, [r0, #80]	; 0x50
 8001986:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <__sinit+0x58>)
 8001988:	4a12      	ldr	r2, [pc, #72]	; (80019d4 <__sinit+0x5c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6282      	str	r2, [r0, #40]	; 0x28
 800198e:	4298      	cmp	r0, r3
 8001990:	bf04      	itt	eq
 8001992:	2301      	moveq	r3, #1
 8001994:	6183      	streq	r3, [r0, #24]
 8001996:	f000 f81f 	bl	80019d8 <__sfp>
 800199a:	6060      	str	r0, [r4, #4]
 800199c:	4620      	mov	r0, r4
 800199e:	f000 f81b 	bl	80019d8 <__sfp>
 80019a2:	60a0      	str	r0, [r4, #8]
 80019a4:	4620      	mov	r0, r4
 80019a6:	f000 f817 	bl	80019d8 <__sfp>
 80019aa:	2200      	movs	r2, #0
 80019ac:	60e0      	str	r0, [r4, #12]
 80019ae:	2104      	movs	r1, #4
 80019b0:	6860      	ldr	r0, [r4, #4]
 80019b2:	f7ff ffa1 	bl	80018f8 <std>
 80019b6:	2201      	movs	r2, #1
 80019b8:	2109      	movs	r1, #9
 80019ba:	68a0      	ldr	r0, [r4, #8]
 80019bc:	f7ff ff9c 	bl	80018f8 <std>
 80019c0:	2202      	movs	r2, #2
 80019c2:	2112      	movs	r1, #18
 80019c4:	68e0      	ldr	r0, [r4, #12]
 80019c6:	f7ff ff97 	bl	80018f8 <std>
 80019ca:	2301      	movs	r3, #1
 80019cc:	61a3      	str	r3, [r4, #24]
 80019ce:	bd10      	pop	{r4, pc}
 80019d0:	0800298c 	.word	0x0800298c
 80019d4:	08001941 	.word	0x08001941

080019d8 <__sfp>:
 80019d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019da:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <__sfp+0x70>)
 80019dc:	681e      	ldr	r6, [r3, #0]
 80019de:	69b3      	ldr	r3, [r6, #24]
 80019e0:	4607      	mov	r7, r0
 80019e2:	b913      	cbnz	r3, 80019ea <__sfp+0x12>
 80019e4:	4630      	mov	r0, r6
 80019e6:	f7ff ffc7 	bl	8001978 <__sinit>
 80019ea:	3648      	adds	r6, #72	; 0x48
 80019ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	d503      	bpl.n	80019fc <__sfp+0x24>
 80019f4:	6833      	ldr	r3, [r6, #0]
 80019f6:	b133      	cbz	r3, 8001a06 <__sfp+0x2e>
 80019f8:	6836      	ldr	r6, [r6, #0]
 80019fa:	e7f7      	b.n	80019ec <__sfp+0x14>
 80019fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001a00:	b16d      	cbz	r5, 8001a1e <__sfp+0x46>
 8001a02:	3468      	adds	r4, #104	; 0x68
 8001a04:	e7f4      	b.n	80019f0 <__sfp+0x18>
 8001a06:	2104      	movs	r1, #4
 8001a08:	4638      	mov	r0, r7
 8001a0a:	f7ff ff9f 	bl	800194c <__sfmoreglue>
 8001a0e:	6030      	str	r0, [r6, #0]
 8001a10:	2800      	cmp	r0, #0
 8001a12:	d1f1      	bne.n	80019f8 <__sfp+0x20>
 8001a14:	230c      	movs	r3, #12
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	4604      	mov	r4, r0
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <__sfp+0x74>)
 8001a20:	6665      	str	r5, [r4, #100]	; 0x64
 8001a22:	e9c4 5500 	strd	r5, r5, [r4]
 8001a26:	60a5      	str	r5, [r4, #8]
 8001a28:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001a2c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001a30:	2208      	movs	r2, #8
 8001a32:	4629      	mov	r1, r5
 8001a34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001a38:	f7ff fd6a 	bl	8001510 <memset>
 8001a3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001a40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001a44:	e7e9      	b.n	8001a1a <__sfp+0x42>
 8001a46:	bf00      	nop
 8001a48:	0800298c 	.word	0x0800298c
 8001a4c:	ffff0001 	.word	0xffff0001

08001a50 <_fwalk_reent>:
 8001a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a54:	4680      	mov	r8, r0
 8001a56:	4689      	mov	r9, r1
 8001a58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001a5c:	2600      	movs	r6, #0
 8001a5e:	b914      	cbnz	r4, 8001a66 <_fwalk_reent+0x16>
 8001a60:	4630      	mov	r0, r6
 8001a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a66:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001a6a:	3f01      	subs	r7, #1
 8001a6c:	d501      	bpl.n	8001a72 <_fwalk_reent+0x22>
 8001a6e:	6824      	ldr	r4, [r4, #0]
 8001a70:	e7f5      	b.n	8001a5e <_fwalk_reent+0xe>
 8001a72:	89ab      	ldrh	r3, [r5, #12]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d907      	bls.n	8001a88 <_fwalk_reent+0x38>
 8001a78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	d003      	beq.n	8001a88 <_fwalk_reent+0x38>
 8001a80:	4629      	mov	r1, r5
 8001a82:	4640      	mov	r0, r8
 8001a84:	47c8      	blx	r9
 8001a86:	4306      	orrs	r6, r0
 8001a88:	3568      	adds	r5, #104	; 0x68
 8001a8a:	e7ee      	b.n	8001a6a <_fwalk_reent+0x1a>

08001a8c <__swhatbuf_r>:
 8001a8c:	b570      	push	{r4, r5, r6, lr}
 8001a8e:	460e      	mov	r6, r1
 8001a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a94:	2900      	cmp	r1, #0
 8001a96:	b096      	sub	sp, #88	; 0x58
 8001a98:	4614      	mov	r4, r2
 8001a9a:	461d      	mov	r5, r3
 8001a9c:	da07      	bge.n	8001aae <__swhatbuf_r+0x22>
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	602b      	str	r3, [r5, #0]
 8001aa2:	89b3      	ldrh	r3, [r6, #12]
 8001aa4:	061a      	lsls	r2, r3, #24
 8001aa6:	d410      	bmi.n	8001aca <__swhatbuf_r+0x3e>
 8001aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aac:	e00e      	b.n	8001acc <__swhatbuf_r+0x40>
 8001aae:	466a      	mov	r2, sp
 8001ab0:	f000 fc34 	bl	800231c <_fstat_r>
 8001ab4:	2800      	cmp	r0, #0
 8001ab6:	dbf2      	blt.n	8001a9e <__swhatbuf_r+0x12>
 8001ab8:	9a01      	ldr	r2, [sp, #4]
 8001aba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001abe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001ac2:	425a      	negs	r2, r3
 8001ac4:	415a      	adcs	r2, r3
 8001ac6:	602a      	str	r2, [r5, #0]
 8001ac8:	e7ee      	b.n	8001aa8 <__swhatbuf_r+0x1c>
 8001aca:	2340      	movs	r3, #64	; 0x40
 8001acc:	2000      	movs	r0, #0
 8001ace:	6023      	str	r3, [r4, #0]
 8001ad0:	b016      	add	sp, #88	; 0x58
 8001ad2:	bd70      	pop	{r4, r5, r6, pc}

08001ad4 <__smakebuf_r>:
 8001ad4:	898b      	ldrh	r3, [r1, #12]
 8001ad6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001ad8:	079d      	lsls	r5, r3, #30
 8001ada:	4606      	mov	r6, r0
 8001adc:	460c      	mov	r4, r1
 8001ade:	d507      	bpl.n	8001af0 <__smakebuf_r+0x1c>
 8001ae0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001ae4:	6023      	str	r3, [r4, #0]
 8001ae6:	6123      	str	r3, [r4, #16]
 8001ae8:	2301      	movs	r3, #1
 8001aea:	6163      	str	r3, [r4, #20]
 8001aec:	b002      	add	sp, #8
 8001aee:	bd70      	pop	{r4, r5, r6, pc}
 8001af0:	ab01      	add	r3, sp, #4
 8001af2:	466a      	mov	r2, sp
 8001af4:	f7ff ffca 	bl	8001a8c <__swhatbuf_r>
 8001af8:	9900      	ldr	r1, [sp, #0]
 8001afa:	4605      	mov	r5, r0
 8001afc:	4630      	mov	r0, r6
 8001afe:	f000 f877 	bl	8001bf0 <_malloc_r>
 8001b02:	b948      	cbnz	r0, 8001b18 <__smakebuf_r+0x44>
 8001b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b08:	059a      	lsls	r2, r3, #22
 8001b0a:	d4ef      	bmi.n	8001aec <__smakebuf_r+0x18>
 8001b0c:	f023 0303 	bic.w	r3, r3, #3
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	81a3      	strh	r3, [r4, #12]
 8001b16:	e7e3      	b.n	8001ae0 <__smakebuf_r+0xc>
 8001b18:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <__smakebuf_r+0x7c>)
 8001b1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8001b1c:	89a3      	ldrh	r3, [r4, #12]
 8001b1e:	6020      	str	r0, [r4, #0]
 8001b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b24:	81a3      	strh	r3, [r4, #12]
 8001b26:	9b00      	ldr	r3, [sp, #0]
 8001b28:	6163      	str	r3, [r4, #20]
 8001b2a:	9b01      	ldr	r3, [sp, #4]
 8001b2c:	6120      	str	r0, [r4, #16]
 8001b2e:	b15b      	cbz	r3, 8001b48 <__smakebuf_r+0x74>
 8001b30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b34:	4630      	mov	r0, r6
 8001b36:	f000 fc03 	bl	8002340 <_isatty_r>
 8001b3a:	b128      	cbz	r0, 8001b48 <__smakebuf_r+0x74>
 8001b3c:	89a3      	ldrh	r3, [r4, #12]
 8001b3e:	f023 0303 	bic.w	r3, r3, #3
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	81a3      	strh	r3, [r4, #12]
 8001b48:	89a3      	ldrh	r3, [r4, #12]
 8001b4a:	431d      	orrs	r5, r3
 8001b4c:	81a5      	strh	r5, [r4, #12]
 8001b4e:	e7cd      	b.n	8001aec <__smakebuf_r+0x18>
 8001b50:	08001941 	.word	0x08001941

08001b54 <_free_r>:
 8001b54:	b538      	push	{r3, r4, r5, lr}
 8001b56:	4605      	mov	r5, r0
 8001b58:	2900      	cmp	r1, #0
 8001b5a:	d045      	beq.n	8001be8 <_free_r+0x94>
 8001b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b60:	1f0c      	subs	r4, r1, #4
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	bfb8      	it	lt
 8001b66:	18e4      	addlt	r4, r4, r3
 8001b68:	f000 fc0c 	bl	8002384 <__malloc_lock>
 8001b6c:	4a1f      	ldr	r2, [pc, #124]	; (8001bec <_free_r+0x98>)
 8001b6e:	6813      	ldr	r3, [r2, #0]
 8001b70:	4610      	mov	r0, r2
 8001b72:	b933      	cbnz	r3, 8001b82 <_free_r+0x2e>
 8001b74:	6063      	str	r3, [r4, #4]
 8001b76:	6014      	str	r4, [r2, #0]
 8001b78:	4628      	mov	r0, r5
 8001b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b7e:	f000 bc02 	b.w	8002386 <__malloc_unlock>
 8001b82:	42a3      	cmp	r3, r4
 8001b84:	d90c      	bls.n	8001ba0 <_free_r+0x4c>
 8001b86:	6821      	ldr	r1, [r4, #0]
 8001b88:	1862      	adds	r2, r4, r1
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	bf04      	itt	eq
 8001b8e:	681a      	ldreq	r2, [r3, #0]
 8001b90:	685b      	ldreq	r3, [r3, #4]
 8001b92:	6063      	str	r3, [r4, #4]
 8001b94:	bf04      	itt	eq
 8001b96:	1852      	addeq	r2, r2, r1
 8001b98:	6022      	streq	r2, [r4, #0]
 8001b9a:	6004      	str	r4, [r0, #0]
 8001b9c:	e7ec      	b.n	8001b78 <_free_r+0x24>
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	b10a      	cbz	r2, 8001ba8 <_free_r+0x54>
 8001ba4:	42a2      	cmp	r2, r4
 8001ba6:	d9fa      	bls.n	8001b9e <_free_r+0x4a>
 8001ba8:	6819      	ldr	r1, [r3, #0]
 8001baa:	1858      	adds	r0, r3, r1
 8001bac:	42a0      	cmp	r0, r4
 8001bae:	d10b      	bne.n	8001bc8 <_free_r+0x74>
 8001bb0:	6820      	ldr	r0, [r4, #0]
 8001bb2:	4401      	add	r1, r0
 8001bb4:	1858      	adds	r0, r3, r1
 8001bb6:	4282      	cmp	r2, r0
 8001bb8:	6019      	str	r1, [r3, #0]
 8001bba:	d1dd      	bne.n	8001b78 <_free_r+0x24>
 8001bbc:	6810      	ldr	r0, [r2, #0]
 8001bbe:	6852      	ldr	r2, [r2, #4]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	4401      	add	r1, r0
 8001bc4:	6019      	str	r1, [r3, #0]
 8001bc6:	e7d7      	b.n	8001b78 <_free_r+0x24>
 8001bc8:	d902      	bls.n	8001bd0 <_free_r+0x7c>
 8001bca:	230c      	movs	r3, #12
 8001bcc:	602b      	str	r3, [r5, #0]
 8001bce:	e7d3      	b.n	8001b78 <_free_r+0x24>
 8001bd0:	6820      	ldr	r0, [r4, #0]
 8001bd2:	1821      	adds	r1, r4, r0
 8001bd4:	428a      	cmp	r2, r1
 8001bd6:	bf04      	itt	eq
 8001bd8:	6811      	ldreq	r1, [r2, #0]
 8001bda:	6852      	ldreq	r2, [r2, #4]
 8001bdc:	6062      	str	r2, [r4, #4]
 8001bde:	bf04      	itt	eq
 8001be0:	1809      	addeq	r1, r1, r0
 8001be2:	6021      	streq	r1, [r4, #0]
 8001be4:	605c      	str	r4, [r3, #4]
 8001be6:	e7c7      	b.n	8001b78 <_free_r+0x24>
 8001be8:	bd38      	pop	{r3, r4, r5, pc}
 8001bea:	bf00      	nop
 8001bec:	200000b0 	.word	0x200000b0

08001bf0 <_malloc_r>:
 8001bf0:	b570      	push	{r4, r5, r6, lr}
 8001bf2:	1ccd      	adds	r5, r1, #3
 8001bf4:	f025 0503 	bic.w	r5, r5, #3
 8001bf8:	3508      	adds	r5, #8
 8001bfa:	2d0c      	cmp	r5, #12
 8001bfc:	bf38      	it	cc
 8001bfe:	250c      	movcc	r5, #12
 8001c00:	2d00      	cmp	r5, #0
 8001c02:	4606      	mov	r6, r0
 8001c04:	db01      	blt.n	8001c0a <_malloc_r+0x1a>
 8001c06:	42a9      	cmp	r1, r5
 8001c08:	d903      	bls.n	8001c12 <_malloc_r+0x22>
 8001c0a:	230c      	movs	r3, #12
 8001c0c:	6033      	str	r3, [r6, #0]
 8001c0e:	2000      	movs	r0, #0
 8001c10:	bd70      	pop	{r4, r5, r6, pc}
 8001c12:	f000 fbb7 	bl	8002384 <__malloc_lock>
 8001c16:	4a21      	ldr	r2, [pc, #132]	; (8001c9c <_malloc_r+0xac>)
 8001c18:	6814      	ldr	r4, [r2, #0]
 8001c1a:	4621      	mov	r1, r4
 8001c1c:	b991      	cbnz	r1, 8001c44 <_malloc_r+0x54>
 8001c1e:	4c20      	ldr	r4, [pc, #128]	; (8001ca0 <_malloc_r+0xb0>)
 8001c20:	6823      	ldr	r3, [r4, #0]
 8001c22:	b91b      	cbnz	r3, 8001c2c <_malloc_r+0x3c>
 8001c24:	4630      	mov	r0, r6
 8001c26:	f000 fb03 	bl	8002230 <_sbrk_r>
 8001c2a:	6020      	str	r0, [r4, #0]
 8001c2c:	4629      	mov	r1, r5
 8001c2e:	4630      	mov	r0, r6
 8001c30:	f000 fafe 	bl	8002230 <_sbrk_r>
 8001c34:	1c43      	adds	r3, r0, #1
 8001c36:	d124      	bne.n	8001c82 <_malloc_r+0x92>
 8001c38:	230c      	movs	r3, #12
 8001c3a:	6033      	str	r3, [r6, #0]
 8001c3c:	4630      	mov	r0, r6
 8001c3e:	f000 fba2 	bl	8002386 <__malloc_unlock>
 8001c42:	e7e4      	b.n	8001c0e <_malloc_r+0x1e>
 8001c44:	680b      	ldr	r3, [r1, #0]
 8001c46:	1b5b      	subs	r3, r3, r5
 8001c48:	d418      	bmi.n	8001c7c <_malloc_r+0x8c>
 8001c4a:	2b0b      	cmp	r3, #11
 8001c4c:	d90f      	bls.n	8001c6e <_malloc_r+0x7e>
 8001c4e:	600b      	str	r3, [r1, #0]
 8001c50:	50cd      	str	r5, [r1, r3]
 8001c52:	18cc      	adds	r4, r1, r3
 8001c54:	4630      	mov	r0, r6
 8001c56:	f000 fb96 	bl	8002386 <__malloc_unlock>
 8001c5a:	f104 000b 	add.w	r0, r4, #11
 8001c5e:	1d23      	adds	r3, r4, #4
 8001c60:	f020 0007 	bic.w	r0, r0, #7
 8001c64:	1ac3      	subs	r3, r0, r3
 8001c66:	d0d3      	beq.n	8001c10 <_malloc_r+0x20>
 8001c68:	425a      	negs	r2, r3
 8001c6a:	50e2      	str	r2, [r4, r3]
 8001c6c:	e7d0      	b.n	8001c10 <_malloc_r+0x20>
 8001c6e:	428c      	cmp	r4, r1
 8001c70:	684b      	ldr	r3, [r1, #4]
 8001c72:	bf16      	itet	ne
 8001c74:	6063      	strne	r3, [r4, #4]
 8001c76:	6013      	streq	r3, [r2, #0]
 8001c78:	460c      	movne	r4, r1
 8001c7a:	e7eb      	b.n	8001c54 <_malloc_r+0x64>
 8001c7c:	460c      	mov	r4, r1
 8001c7e:	6849      	ldr	r1, [r1, #4]
 8001c80:	e7cc      	b.n	8001c1c <_malloc_r+0x2c>
 8001c82:	1cc4      	adds	r4, r0, #3
 8001c84:	f024 0403 	bic.w	r4, r4, #3
 8001c88:	42a0      	cmp	r0, r4
 8001c8a:	d005      	beq.n	8001c98 <_malloc_r+0xa8>
 8001c8c:	1a21      	subs	r1, r4, r0
 8001c8e:	4630      	mov	r0, r6
 8001c90:	f000 face 	bl	8002230 <_sbrk_r>
 8001c94:	3001      	adds	r0, #1
 8001c96:	d0cf      	beq.n	8001c38 <_malloc_r+0x48>
 8001c98:	6025      	str	r5, [r4, #0]
 8001c9a:	e7db      	b.n	8001c54 <_malloc_r+0x64>
 8001c9c:	200000b0 	.word	0x200000b0
 8001ca0:	200000b4 	.word	0x200000b4

08001ca4 <__sfputc_r>:
 8001ca4:	6893      	ldr	r3, [r2, #8]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	b410      	push	{r4}
 8001cac:	6093      	str	r3, [r2, #8]
 8001cae:	da07      	bge.n	8001cc0 <__sfputc_r+0x1c>
 8001cb0:	6994      	ldr	r4, [r2, #24]
 8001cb2:	42a3      	cmp	r3, r4
 8001cb4:	db01      	blt.n	8001cba <__sfputc_r+0x16>
 8001cb6:	290a      	cmp	r1, #10
 8001cb8:	d102      	bne.n	8001cc0 <__sfputc_r+0x1c>
 8001cba:	bc10      	pop	{r4}
 8001cbc:	f7ff bcac 	b.w	8001618 <__swbuf_r>
 8001cc0:	6813      	ldr	r3, [r2, #0]
 8001cc2:	1c58      	adds	r0, r3, #1
 8001cc4:	6010      	str	r0, [r2, #0]
 8001cc6:	7019      	strb	r1, [r3, #0]
 8001cc8:	4608      	mov	r0, r1
 8001cca:	bc10      	pop	{r4}
 8001ccc:	4770      	bx	lr

08001cce <__sfputs_r>:
 8001cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cd0:	4606      	mov	r6, r0
 8001cd2:	460f      	mov	r7, r1
 8001cd4:	4614      	mov	r4, r2
 8001cd6:	18d5      	adds	r5, r2, r3
 8001cd8:	42ac      	cmp	r4, r5
 8001cda:	d101      	bne.n	8001ce0 <__sfputs_r+0x12>
 8001cdc:	2000      	movs	r0, #0
 8001cde:	e007      	b.n	8001cf0 <__sfputs_r+0x22>
 8001ce0:	463a      	mov	r2, r7
 8001ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ce6:	4630      	mov	r0, r6
 8001ce8:	f7ff ffdc 	bl	8001ca4 <__sfputc_r>
 8001cec:	1c43      	adds	r3, r0, #1
 8001cee:	d1f3      	bne.n	8001cd8 <__sfputs_r+0xa>
 8001cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001cf4 <_vfiprintf_r>:
 8001cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cf8:	460c      	mov	r4, r1
 8001cfa:	b09d      	sub	sp, #116	; 0x74
 8001cfc:	4617      	mov	r7, r2
 8001cfe:	461d      	mov	r5, r3
 8001d00:	4606      	mov	r6, r0
 8001d02:	b118      	cbz	r0, 8001d0c <_vfiprintf_r+0x18>
 8001d04:	6983      	ldr	r3, [r0, #24]
 8001d06:	b90b      	cbnz	r3, 8001d0c <_vfiprintf_r+0x18>
 8001d08:	f7ff fe36 	bl	8001978 <__sinit>
 8001d0c:	4b7c      	ldr	r3, [pc, #496]	; (8001f00 <_vfiprintf_r+0x20c>)
 8001d0e:	429c      	cmp	r4, r3
 8001d10:	d158      	bne.n	8001dc4 <_vfiprintf_r+0xd0>
 8001d12:	6874      	ldr	r4, [r6, #4]
 8001d14:	89a3      	ldrh	r3, [r4, #12]
 8001d16:	0718      	lsls	r0, r3, #28
 8001d18:	d55e      	bpl.n	8001dd8 <_vfiprintf_r+0xe4>
 8001d1a:	6923      	ldr	r3, [r4, #16]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d05b      	beq.n	8001dd8 <_vfiprintf_r+0xe4>
 8001d20:	2300      	movs	r3, #0
 8001d22:	9309      	str	r3, [sp, #36]	; 0x24
 8001d24:	2320      	movs	r3, #32
 8001d26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001d2a:	2330      	movs	r3, #48	; 0x30
 8001d2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001d30:	9503      	str	r5, [sp, #12]
 8001d32:	f04f 0b01 	mov.w	fp, #1
 8001d36:	46b8      	mov	r8, r7
 8001d38:	4645      	mov	r5, r8
 8001d3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001d3e:	b10b      	cbz	r3, 8001d44 <_vfiprintf_r+0x50>
 8001d40:	2b25      	cmp	r3, #37	; 0x25
 8001d42:	d154      	bne.n	8001dee <_vfiprintf_r+0xfa>
 8001d44:	ebb8 0a07 	subs.w	sl, r8, r7
 8001d48:	d00b      	beq.n	8001d62 <_vfiprintf_r+0x6e>
 8001d4a:	4653      	mov	r3, sl
 8001d4c:	463a      	mov	r2, r7
 8001d4e:	4621      	mov	r1, r4
 8001d50:	4630      	mov	r0, r6
 8001d52:	f7ff ffbc 	bl	8001cce <__sfputs_r>
 8001d56:	3001      	adds	r0, #1
 8001d58:	f000 80c2 	beq.w	8001ee0 <_vfiprintf_r+0x1ec>
 8001d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d5e:	4453      	add	r3, sl
 8001d60:	9309      	str	r3, [sp, #36]	; 0x24
 8001d62:	f898 3000 	ldrb.w	r3, [r8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 80ba 	beq.w	8001ee0 <_vfiprintf_r+0x1ec>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d76:	9304      	str	r3, [sp, #16]
 8001d78:	9307      	str	r3, [sp, #28]
 8001d7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001d7e:	931a      	str	r3, [sp, #104]	; 0x68
 8001d80:	46a8      	mov	r8, r5
 8001d82:	2205      	movs	r2, #5
 8001d84:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001d88:	485e      	ldr	r0, [pc, #376]	; (8001f04 <_vfiprintf_r+0x210>)
 8001d8a:	f7fe fa39 	bl	8000200 <memchr>
 8001d8e:	9b04      	ldr	r3, [sp, #16]
 8001d90:	bb78      	cbnz	r0, 8001df2 <_vfiprintf_r+0xfe>
 8001d92:	06d9      	lsls	r1, r3, #27
 8001d94:	bf44      	itt	mi
 8001d96:	2220      	movmi	r2, #32
 8001d98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001d9c:	071a      	lsls	r2, r3, #28
 8001d9e:	bf44      	itt	mi
 8001da0:	222b      	movmi	r2, #43	; 0x2b
 8001da2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001da6:	782a      	ldrb	r2, [r5, #0]
 8001da8:	2a2a      	cmp	r2, #42	; 0x2a
 8001daa:	d02a      	beq.n	8001e02 <_vfiprintf_r+0x10e>
 8001dac:	9a07      	ldr	r2, [sp, #28]
 8001dae:	46a8      	mov	r8, r5
 8001db0:	2000      	movs	r0, #0
 8001db2:	250a      	movs	r5, #10
 8001db4:	4641      	mov	r1, r8
 8001db6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001dba:	3b30      	subs	r3, #48	; 0x30
 8001dbc:	2b09      	cmp	r3, #9
 8001dbe:	d969      	bls.n	8001e94 <_vfiprintf_r+0x1a0>
 8001dc0:	b360      	cbz	r0, 8001e1c <_vfiprintf_r+0x128>
 8001dc2:	e024      	b.n	8001e0e <_vfiprintf_r+0x11a>
 8001dc4:	4b50      	ldr	r3, [pc, #320]	; (8001f08 <_vfiprintf_r+0x214>)
 8001dc6:	429c      	cmp	r4, r3
 8001dc8:	d101      	bne.n	8001dce <_vfiprintf_r+0xda>
 8001dca:	68b4      	ldr	r4, [r6, #8]
 8001dcc:	e7a2      	b.n	8001d14 <_vfiprintf_r+0x20>
 8001dce:	4b4f      	ldr	r3, [pc, #316]	; (8001f0c <_vfiprintf_r+0x218>)
 8001dd0:	429c      	cmp	r4, r3
 8001dd2:	bf08      	it	eq
 8001dd4:	68f4      	ldreq	r4, [r6, #12]
 8001dd6:	e79d      	b.n	8001d14 <_vfiprintf_r+0x20>
 8001dd8:	4621      	mov	r1, r4
 8001dda:	4630      	mov	r0, r6
 8001ddc:	f7ff fc6e 	bl	80016bc <__swsetup_r>
 8001de0:	2800      	cmp	r0, #0
 8001de2:	d09d      	beq.n	8001d20 <_vfiprintf_r+0x2c>
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295
 8001de8:	b01d      	add	sp, #116	; 0x74
 8001dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001dee:	46a8      	mov	r8, r5
 8001df0:	e7a2      	b.n	8001d38 <_vfiprintf_r+0x44>
 8001df2:	4a44      	ldr	r2, [pc, #272]	; (8001f04 <_vfiprintf_r+0x210>)
 8001df4:	1a80      	subs	r0, r0, r2
 8001df6:	fa0b f000 	lsl.w	r0, fp, r0
 8001dfa:	4318      	orrs	r0, r3
 8001dfc:	9004      	str	r0, [sp, #16]
 8001dfe:	4645      	mov	r5, r8
 8001e00:	e7be      	b.n	8001d80 <_vfiprintf_r+0x8c>
 8001e02:	9a03      	ldr	r2, [sp, #12]
 8001e04:	1d11      	adds	r1, r2, #4
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	9103      	str	r1, [sp, #12]
 8001e0a:	2a00      	cmp	r2, #0
 8001e0c:	db01      	blt.n	8001e12 <_vfiprintf_r+0x11e>
 8001e0e:	9207      	str	r2, [sp, #28]
 8001e10:	e004      	b.n	8001e1c <_vfiprintf_r+0x128>
 8001e12:	4252      	negs	r2, r2
 8001e14:	f043 0302 	orr.w	r3, r3, #2
 8001e18:	9207      	str	r2, [sp, #28]
 8001e1a:	9304      	str	r3, [sp, #16]
 8001e1c:	f898 3000 	ldrb.w	r3, [r8]
 8001e20:	2b2e      	cmp	r3, #46	; 0x2e
 8001e22:	d10e      	bne.n	8001e42 <_vfiprintf_r+0x14e>
 8001e24:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001e28:	2b2a      	cmp	r3, #42	; 0x2a
 8001e2a:	d138      	bne.n	8001e9e <_vfiprintf_r+0x1aa>
 8001e2c:	9b03      	ldr	r3, [sp, #12]
 8001e2e:	1d1a      	adds	r2, r3, #4
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	9203      	str	r2, [sp, #12]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	bfb8      	it	lt
 8001e38:	f04f 33ff 	movlt.w	r3, #4294967295
 8001e3c:	f108 0802 	add.w	r8, r8, #2
 8001e40:	9305      	str	r3, [sp, #20]
 8001e42:	4d33      	ldr	r5, [pc, #204]	; (8001f10 <_vfiprintf_r+0x21c>)
 8001e44:	f898 1000 	ldrb.w	r1, [r8]
 8001e48:	2203      	movs	r2, #3
 8001e4a:	4628      	mov	r0, r5
 8001e4c:	f7fe f9d8 	bl	8000200 <memchr>
 8001e50:	b140      	cbz	r0, 8001e64 <_vfiprintf_r+0x170>
 8001e52:	2340      	movs	r3, #64	; 0x40
 8001e54:	1b40      	subs	r0, r0, r5
 8001e56:	fa03 f000 	lsl.w	r0, r3, r0
 8001e5a:	9b04      	ldr	r3, [sp, #16]
 8001e5c:	4303      	orrs	r3, r0
 8001e5e:	f108 0801 	add.w	r8, r8, #1
 8001e62:	9304      	str	r3, [sp, #16]
 8001e64:	f898 1000 	ldrb.w	r1, [r8]
 8001e68:	482a      	ldr	r0, [pc, #168]	; (8001f14 <_vfiprintf_r+0x220>)
 8001e6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001e6e:	2206      	movs	r2, #6
 8001e70:	f108 0701 	add.w	r7, r8, #1
 8001e74:	f7fe f9c4 	bl	8000200 <memchr>
 8001e78:	2800      	cmp	r0, #0
 8001e7a:	d037      	beq.n	8001eec <_vfiprintf_r+0x1f8>
 8001e7c:	4b26      	ldr	r3, [pc, #152]	; (8001f18 <_vfiprintf_r+0x224>)
 8001e7e:	bb1b      	cbnz	r3, 8001ec8 <_vfiprintf_r+0x1d4>
 8001e80:	9b03      	ldr	r3, [sp, #12]
 8001e82:	3307      	adds	r3, #7
 8001e84:	f023 0307 	bic.w	r3, r3, #7
 8001e88:	3308      	adds	r3, #8
 8001e8a:	9303      	str	r3, [sp, #12]
 8001e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e8e:	444b      	add	r3, r9
 8001e90:	9309      	str	r3, [sp, #36]	; 0x24
 8001e92:	e750      	b.n	8001d36 <_vfiprintf_r+0x42>
 8001e94:	fb05 3202 	mla	r2, r5, r2, r3
 8001e98:	2001      	movs	r0, #1
 8001e9a:	4688      	mov	r8, r1
 8001e9c:	e78a      	b.n	8001db4 <_vfiprintf_r+0xc0>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f108 0801 	add.w	r8, r8, #1
 8001ea4:	9305      	str	r3, [sp, #20]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	250a      	movs	r5, #10
 8001eaa:	4640      	mov	r0, r8
 8001eac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001eb0:	3a30      	subs	r2, #48	; 0x30
 8001eb2:	2a09      	cmp	r2, #9
 8001eb4:	d903      	bls.n	8001ebe <_vfiprintf_r+0x1ca>
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0c3      	beq.n	8001e42 <_vfiprintf_r+0x14e>
 8001eba:	9105      	str	r1, [sp, #20]
 8001ebc:	e7c1      	b.n	8001e42 <_vfiprintf_r+0x14e>
 8001ebe:	fb05 2101 	mla	r1, r5, r1, r2
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	4680      	mov	r8, r0
 8001ec6:	e7f0      	b.n	8001eaa <_vfiprintf_r+0x1b6>
 8001ec8:	ab03      	add	r3, sp, #12
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	4622      	mov	r2, r4
 8001ece:	4b13      	ldr	r3, [pc, #76]	; (8001f1c <_vfiprintf_r+0x228>)
 8001ed0:	a904      	add	r1, sp, #16
 8001ed2:	4630      	mov	r0, r6
 8001ed4:	f3af 8000 	nop.w
 8001ed8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001edc:	4681      	mov	r9, r0
 8001ede:	d1d5      	bne.n	8001e8c <_vfiprintf_r+0x198>
 8001ee0:	89a3      	ldrh	r3, [r4, #12]
 8001ee2:	065b      	lsls	r3, r3, #25
 8001ee4:	f53f af7e 	bmi.w	8001de4 <_vfiprintf_r+0xf0>
 8001ee8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001eea:	e77d      	b.n	8001de8 <_vfiprintf_r+0xf4>
 8001eec:	ab03      	add	r3, sp, #12
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	4622      	mov	r2, r4
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <_vfiprintf_r+0x228>)
 8001ef4:	a904      	add	r1, sp, #16
 8001ef6:	4630      	mov	r0, r6
 8001ef8:	f000 f888 	bl	800200c <_printf_i>
 8001efc:	e7ec      	b.n	8001ed8 <_vfiprintf_r+0x1e4>
 8001efe:	bf00      	nop
 8001f00:	080029b0 	.word	0x080029b0
 8001f04:	080029f0 	.word	0x080029f0
 8001f08:	080029d0 	.word	0x080029d0
 8001f0c:	08002990 	.word	0x08002990
 8001f10:	080029f6 	.word	0x080029f6
 8001f14:	080029fa 	.word	0x080029fa
 8001f18:	00000000 	.word	0x00000000
 8001f1c:	08001ccf 	.word	0x08001ccf

08001f20 <_printf_common>:
 8001f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f24:	4691      	mov	r9, r2
 8001f26:	461f      	mov	r7, r3
 8001f28:	688a      	ldr	r2, [r1, #8]
 8001f2a:	690b      	ldr	r3, [r1, #16]
 8001f2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001f30:	4293      	cmp	r3, r2
 8001f32:	bfb8      	it	lt
 8001f34:	4613      	movlt	r3, r2
 8001f36:	f8c9 3000 	str.w	r3, [r9]
 8001f3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001f3e:	4606      	mov	r6, r0
 8001f40:	460c      	mov	r4, r1
 8001f42:	b112      	cbz	r2, 8001f4a <_printf_common+0x2a>
 8001f44:	3301      	adds	r3, #1
 8001f46:	f8c9 3000 	str.w	r3, [r9]
 8001f4a:	6823      	ldr	r3, [r4, #0]
 8001f4c:	0699      	lsls	r1, r3, #26
 8001f4e:	bf42      	ittt	mi
 8001f50:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001f54:	3302      	addmi	r3, #2
 8001f56:	f8c9 3000 	strmi.w	r3, [r9]
 8001f5a:	6825      	ldr	r5, [r4, #0]
 8001f5c:	f015 0506 	ands.w	r5, r5, #6
 8001f60:	d107      	bne.n	8001f72 <_printf_common+0x52>
 8001f62:	f104 0a19 	add.w	sl, r4, #25
 8001f66:	68e3      	ldr	r3, [r4, #12]
 8001f68:	f8d9 2000 	ldr.w	r2, [r9]
 8001f6c:	1a9b      	subs	r3, r3, r2
 8001f6e:	42ab      	cmp	r3, r5
 8001f70:	dc28      	bgt.n	8001fc4 <_printf_common+0xa4>
 8001f72:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001f76:	6822      	ldr	r2, [r4, #0]
 8001f78:	3300      	adds	r3, #0
 8001f7a:	bf18      	it	ne
 8001f7c:	2301      	movne	r3, #1
 8001f7e:	0692      	lsls	r2, r2, #26
 8001f80:	d42d      	bmi.n	8001fde <_printf_common+0xbe>
 8001f82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f86:	4639      	mov	r1, r7
 8001f88:	4630      	mov	r0, r6
 8001f8a:	47c0      	blx	r8
 8001f8c:	3001      	adds	r0, #1
 8001f8e:	d020      	beq.n	8001fd2 <_printf_common+0xb2>
 8001f90:	6823      	ldr	r3, [r4, #0]
 8001f92:	68e5      	ldr	r5, [r4, #12]
 8001f94:	f8d9 2000 	ldr.w	r2, [r9]
 8001f98:	f003 0306 	and.w	r3, r3, #6
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	bf08      	it	eq
 8001fa0:	1aad      	subeq	r5, r5, r2
 8001fa2:	68a3      	ldr	r3, [r4, #8]
 8001fa4:	6922      	ldr	r2, [r4, #16]
 8001fa6:	bf0c      	ite	eq
 8001fa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001fac:	2500      	movne	r5, #0
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	bfc4      	itt	gt
 8001fb2:	1a9b      	subgt	r3, r3, r2
 8001fb4:	18ed      	addgt	r5, r5, r3
 8001fb6:	f04f 0900 	mov.w	r9, #0
 8001fba:	341a      	adds	r4, #26
 8001fbc:	454d      	cmp	r5, r9
 8001fbe:	d11a      	bne.n	8001ff6 <_printf_common+0xd6>
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	e008      	b.n	8001fd6 <_printf_common+0xb6>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	4652      	mov	r2, sl
 8001fc8:	4639      	mov	r1, r7
 8001fca:	4630      	mov	r0, r6
 8001fcc:	47c0      	blx	r8
 8001fce:	3001      	adds	r0, #1
 8001fd0:	d103      	bne.n	8001fda <_printf_common+0xba>
 8001fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fda:	3501      	adds	r5, #1
 8001fdc:	e7c3      	b.n	8001f66 <_printf_common+0x46>
 8001fde:	18e1      	adds	r1, r4, r3
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	2030      	movs	r0, #48	; 0x30
 8001fe4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001fe8:	4422      	add	r2, r4
 8001fea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001fee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001ff2:	3302      	adds	r3, #2
 8001ff4:	e7c5      	b.n	8001f82 <_printf_common+0x62>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	4622      	mov	r2, r4
 8001ffa:	4639      	mov	r1, r7
 8001ffc:	4630      	mov	r0, r6
 8001ffe:	47c0      	blx	r8
 8002000:	3001      	adds	r0, #1
 8002002:	d0e6      	beq.n	8001fd2 <_printf_common+0xb2>
 8002004:	f109 0901 	add.w	r9, r9, #1
 8002008:	e7d8      	b.n	8001fbc <_printf_common+0x9c>
	...

0800200c <_printf_i>:
 800200c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002010:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002014:	460c      	mov	r4, r1
 8002016:	7e09      	ldrb	r1, [r1, #24]
 8002018:	b085      	sub	sp, #20
 800201a:	296e      	cmp	r1, #110	; 0x6e
 800201c:	4617      	mov	r7, r2
 800201e:	4606      	mov	r6, r0
 8002020:	4698      	mov	r8, r3
 8002022:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002024:	f000 80b3 	beq.w	800218e <_printf_i+0x182>
 8002028:	d822      	bhi.n	8002070 <_printf_i+0x64>
 800202a:	2963      	cmp	r1, #99	; 0x63
 800202c:	d036      	beq.n	800209c <_printf_i+0x90>
 800202e:	d80a      	bhi.n	8002046 <_printf_i+0x3a>
 8002030:	2900      	cmp	r1, #0
 8002032:	f000 80b9 	beq.w	80021a8 <_printf_i+0x19c>
 8002036:	2958      	cmp	r1, #88	; 0x58
 8002038:	f000 8083 	beq.w	8002142 <_printf_i+0x136>
 800203c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002040:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002044:	e032      	b.n	80020ac <_printf_i+0xa0>
 8002046:	2964      	cmp	r1, #100	; 0x64
 8002048:	d001      	beq.n	800204e <_printf_i+0x42>
 800204a:	2969      	cmp	r1, #105	; 0x69
 800204c:	d1f6      	bne.n	800203c <_printf_i+0x30>
 800204e:	6820      	ldr	r0, [r4, #0]
 8002050:	6813      	ldr	r3, [r2, #0]
 8002052:	0605      	lsls	r5, r0, #24
 8002054:	f103 0104 	add.w	r1, r3, #4
 8002058:	d52a      	bpl.n	80020b0 <_printf_i+0xa4>
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6011      	str	r1, [r2, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	da03      	bge.n	800206a <_printf_i+0x5e>
 8002062:	222d      	movs	r2, #45	; 0x2d
 8002064:	425b      	negs	r3, r3
 8002066:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800206a:	486f      	ldr	r0, [pc, #444]	; (8002228 <_printf_i+0x21c>)
 800206c:	220a      	movs	r2, #10
 800206e:	e039      	b.n	80020e4 <_printf_i+0xd8>
 8002070:	2973      	cmp	r1, #115	; 0x73
 8002072:	f000 809d 	beq.w	80021b0 <_printf_i+0x1a4>
 8002076:	d808      	bhi.n	800208a <_printf_i+0x7e>
 8002078:	296f      	cmp	r1, #111	; 0x6f
 800207a:	d020      	beq.n	80020be <_printf_i+0xb2>
 800207c:	2970      	cmp	r1, #112	; 0x70
 800207e:	d1dd      	bne.n	800203c <_printf_i+0x30>
 8002080:	6823      	ldr	r3, [r4, #0]
 8002082:	f043 0320 	orr.w	r3, r3, #32
 8002086:	6023      	str	r3, [r4, #0]
 8002088:	e003      	b.n	8002092 <_printf_i+0x86>
 800208a:	2975      	cmp	r1, #117	; 0x75
 800208c:	d017      	beq.n	80020be <_printf_i+0xb2>
 800208e:	2978      	cmp	r1, #120	; 0x78
 8002090:	d1d4      	bne.n	800203c <_printf_i+0x30>
 8002092:	2378      	movs	r3, #120	; 0x78
 8002094:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002098:	4864      	ldr	r0, [pc, #400]	; (800222c <_printf_i+0x220>)
 800209a:	e055      	b.n	8002148 <_printf_i+0x13c>
 800209c:	6813      	ldr	r3, [r2, #0]
 800209e:	1d19      	adds	r1, r3, #4
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6011      	str	r1, [r2, #0]
 80020a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80020a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80020ac:	2301      	movs	r3, #1
 80020ae:	e08c      	b.n	80021ca <_printf_i+0x1be>
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6011      	str	r1, [r2, #0]
 80020b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80020b8:	bf18      	it	ne
 80020ba:	b21b      	sxthne	r3, r3
 80020bc:	e7cf      	b.n	800205e <_printf_i+0x52>
 80020be:	6813      	ldr	r3, [r2, #0]
 80020c0:	6825      	ldr	r5, [r4, #0]
 80020c2:	1d18      	adds	r0, r3, #4
 80020c4:	6010      	str	r0, [r2, #0]
 80020c6:	0628      	lsls	r0, r5, #24
 80020c8:	d501      	bpl.n	80020ce <_printf_i+0xc2>
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	e002      	b.n	80020d4 <_printf_i+0xc8>
 80020ce:	0668      	lsls	r0, r5, #25
 80020d0:	d5fb      	bpl.n	80020ca <_printf_i+0xbe>
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	4854      	ldr	r0, [pc, #336]	; (8002228 <_printf_i+0x21c>)
 80020d6:	296f      	cmp	r1, #111	; 0x6f
 80020d8:	bf14      	ite	ne
 80020da:	220a      	movne	r2, #10
 80020dc:	2208      	moveq	r2, #8
 80020de:	2100      	movs	r1, #0
 80020e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80020e4:	6865      	ldr	r5, [r4, #4]
 80020e6:	60a5      	str	r5, [r4, #8]
 80020e8:	2d00      	cmp	r5, #0
 80020ea:	f2c0 8095 	blt.w	8002218 <_printf_i+0x20c>
 80020ee:	6821      	ldr	r1, [r4, #0]
 80020f0:	f021 0104 	bic.w	r1, r1, #4
 80020f4:	6021      	str	r1, [r4, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d13d      	bne.n	8002176 <_printf_i+0x16a>
 80020fa:	2d00      	cmp	r5, #0
 80020fc:	f040 808e 	bne.w	800221c <_printf_i+0x210>
 8002100:	4665      	mov	r5, ip
 8002102:	2a08      	cmp	r2, #8
 8002104:	d10b      	bne.n	800211e <_printf_i+0x112>
 8002106:	6823      	ldr	r3, [r4, #0]
 8002108:	07db      	lsls	r3, r3, #31
 800210a:	d508      	bpl.n	800211e <_printf_i+0x112>
 800210c:	6923      	ldr	r3, [r4, #16]
 800210e:	6862      	ldr	r2, [r4, #4]
 8002110:	429a      	cmp	r2, r3
 8002112:	bfde      	ittt	le
 8002114:	2330      	movle	r3, #48	; 0x30
 8002116:	f805 3c01 	strble.w	r3, [r5, #-1]
 800211a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800211e:	ebac 0305 	sub.w	r3, ip, r5
 8002122:	6123      	str	r3, [r4, #16]
 8002124:	f8cd 8000 	str.w	r8, [sp]
 8002128:	463b      	mov	r3, r7
 800212a:	aa03      	add	r2, sp, #12
 800212c:	4621      	mov	r1, r4
 800212e:	4630      	mov	r0, r6
 8002130:	f7ff fef6 	bl	8001f20 <_printf_common>
 8002134:	3001      	adds	r0, #1
 8002136:	d14d      	bne.n	80021d4 <_printf_i+0x1c8>
 8002138:	f04f 30ff 	mov.w	r0, #4294967295
 800213c:	b005      	add	sp, #20
 800213e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002142:	4839      	ldr	r0, [pc, #228]	; (8002228 <_printf_i+0x21c>)
 8002144:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002148:	6813      	ldr	r3, [r2, #0]
 800214a:	6821      	ldr	r1, [r4, #0]
 800214c:	1d1d      	adds	r5, r3, #4
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6015      	str	r5, [r2, #0]
 8002152:	060a      	lsls	r2, r1, #24
 8002154:	d50b      	bpl.n	800216e <_printf_i+0x162>
 8002156:	07ca      	lsls	r2, r1, #31
 8002158:	bf44      	itt	mi
 800215a:	f041 0120 	orrmi.w	r1, r1, #32
 800215e:	6021      	strmi	r1, [r4, #0]
 8002160:	b91b      	cbnz	r3, 800216a <_printf_i+0x15e>
 8002162:	6822      	ldr	r2, [r4, #0]
 8002164:	f022 0220 	bic.w	r2, r2, #32
 8002168:	6022      	str	r2, [r4, #0]
 800216a:	2210      	movs	r2, #16
 800216c:	e7b7      	b.n	80020de <_printf_i+0xd2>
 800216e:	064d      	lsls	r5, r1, #25
 8002170:	bf48      	it	mi
 8002172:	b29b      	uxthmi	r3, r3
 8002174:	e7ef      	b.n	8002156 <_printf_i+0x14a>
 8002176:	4665      	mov	r5, ip
 8002178:	fbb3 f1f2 	udiv	r1, r3, r2
 800217c:	fb02 3311 	mls	r3, r2, r1, r3
 8002180:	5cc3      	ldrb	r3, [r0, r3]
 8002182:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002186:	460b      	mov	r3, r1
 8002188:	2900      	cmp	r1, #0
 800218a:	d1f5      	bne.n	8002178 <_printf_i+0x16c>
 800218c:	e7b9      	b.n	8002102 <_printf_i+0xf6>
 800218e:	6813      	ldr	r3, [r2, #0]
 8002190:	6825      	ldr	r5, [r4, #0]
 8002192:	6961      	ldr	r1, [r4, #20]
 8002194:	1d18      	adds	r0, r3, #4
 8002196:	6010      	str	r0, [r2, #0]
 8002198:	0628      	lsls	r0, r5, #24
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	d501      	bpl.n	80021a2 <_printf_i+0x196>
 800219e:	6019      	str	r1, [r3, #0]
 80021a0:	e002      	b.n	80021a8 <_printf_i+0x19c>
 80021a2:	066a      	lsls	r2, r5, #25
 80021a4:	d5fb      	bpl.n	800219e <_printf_i+0x192>
 80021a6:	8019      	strh	r1, [r3, #0]
 80021a8:	2300      	movs	r3, #0
 80021aa:	6123      	str	r3, [r4, #16]
 80021ac:	4665      	mov	r5, ip
 80021ae:	e7b9      	b.n	8002124 <_printf_i+0x118>
 80021b0:	6813      	ldr	r3, [r2, #0]
 80021b2:	1d19      	adds	r1, r3, #4
 80021b4:	6011      	str	r1, [r2, #0]
 80021b6:	681d      	ldr	r5, [r3, #0]
 80021b8:	6862      	ldr	r2, [r4, #4]
 80021ba:	2100      	movs	r1, #0
 80021bc:	4628      	mov	r0, r5
 80021be:	f7fe f81f 	bl	8000200 <memchr>
 80021c2:	b108      	cbz	r0, 80021c8 <_printf_i+0x1bc>
 80021c4:	1b40      	subs	r0, r0, r5
 80021c6:	6060      	str	r0, [r4, #4]
 80021c8:	6863      	ldr	r3, [r4, #4]
 80021ca:	6123      	str	r3, [r4, #16]
 80021cc:	2300      	movs	r3, #0
 80021ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80021d2:	e7a7      	b.n	8002124 <_printf_i+0x118>
 80021d4:	6923      	ldr	r3, [r4, #16]
 80021d6:	462a      	mov	r2, r5
 80021d8:	4639      	mov	r1, r7
 80021da:	4630      	mov	r0, r6
 80021dc:	47c0      	blx	r8
 80021de:	3001      	adds	r0, #1
 80021e0:	d0aa      	beq.n	8002138 <_printf_i+0x12c>
 80021e2:	6823      	ldr	r3, [r4, #0]
 80021e4:	079b      	lsls	r3, r3, #30
 80021e6:	d413      	bmi.n	8002210 <_printf_i+0x204>
 80021e8:	68e0      	ldr	r0, [r4, #12]
 80021ea:	9b03      	ldr	r3, [sp, #12]
 80021ec:	4298      	cmp	r0, r3
 80021ee:	bfb8      	it	lt
 80021f0:	4618      	movlt	r0, r3
 80021f2:	e7a3      	b.n	800213c <_printf_i+0x130>
 80021f4:	2301      	movs	r3, #1
 80021f6:	464a      	mov	r2, r9
 80021f8:	4639      	mov	r1, r7
 80021fa:	4630      	mov	r0, r6
 80021fc:	47c0      	blx	r8
 80021fe:	3001      	adds	r0, #1
 8002200:	d09a      	beq.n	8002138 <_printf_i+0x12c>
 8002202:	3501      	adds	r5, #1
 8002204:	68e3      	ldr	r3, [r4, #12]
 8002206:	9a03      	ldr	r2, [sp, #12]
 8002208:	1a9b      	subs	r3, r3, r2
 800220a:	42ab      	cmp	r3, r5
 800220c:	dcf2      	bgt.n	80021f4 <_printf_i+0x1e8>
 800220e:	e7eb      	b.n	80021e8 <_printf_i+0x1dc>
 8002210:	2500      	movs	r5, #0
 8002212:	f104 0919 	add.w	r9, r4, #25
 8002216:	e7f5      	b.n	8002204 <_printf_i+0x1f8>
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1ac      	bne.n	8002176 <_printf_i+0x16a>
 800221c:	7803      	ldrb	r3, [r0, #0]
 800221e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002222:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002226:	e76c      	b.n	8002102 <_printf_i+0xf6>
 8002228:	08002a01 	.word	0x08002a01
 800222c:	08002a12 	.word	0x08002a12

08002230 <_sbrk_r>:
 8002230:	b538      	push	{r3, r4, r5, lr}
 8002232:	4c06      	ldr	r4, [pc, #24]	; (800224c <_sbrk_r+0x1c>)
 8002234:	2300      	movs	r3, #0
 8002236:	4605      	mov	r5, r0
 8002238:	4608      	mov	r0, r1
 800223a:	6023      	str	r3, [r4, #0]
 800223c:	f7ff f8e8 	bl	8001410 <_sbrk>
 8002240:	1c43      	adds	r3, r0, #1
 8002242:	d102      	bne.n	800224a <_sbrk_r+0x1a>
 8002244:	6823      	ldr	r3, [r4, #0]
 8002246:	b103      	cbz	r3, 800224a <_sbrk_r+0x1a>
 8002248:	602b      	str	r3, [r5, #0]
 800224a:	bd38      	pop	{r3, r4, r5, pc}
 800224c:	20000588 	.word	0x20000588

08002250 <__sread>:
 8002250:	b510      	push	{r4, lr}
 8002252:	460c      	mov	r4, r1
 8002254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002258:	f000 f896 	bl	8002388 <_read_r>
 800225c:	2800      	cmp	r0, #0
 800225e:	bfab      	itete	ge
 8002260:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002262:	89a3      	ldrhlt	r3, [r4, #12]
 8002264:	181b      	addge	r3, r3, r0
 8002266:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800226a:	bfac      	ite	ge
 800226c:	6563      	strge	r3, [r4, #84]	; 0x54
 800226e:	81a3      	strhlt	r3, [r4, #12]
 8002270:	bd10      	pop	{r4, pc}

08002272 <__swrite>:
 8002272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002276:	461f      	mov	r7, r3
 8002278:	898b      	ldrh	r3, [r1, #12]
 800227a:	05db      	lsls	r3, r3, #23
 800227c:	4605      	mov	r5, r0
 800227e:	460c      	mov	r4, r1
 8002280:	4616      	mov	r6, r2
 8002282:	d505      	bpl.n	8002290 <__swrite+0x1e>
 8002284:	2302      	movs	r3, #2
 8002286:	2200      	movs	r2, #0
 8002288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800228c:	f000 f868 	bl	8002360 <_lseek_r>
 8002290:	89a3      	ldrh	r3, [r4, #12]
 8002292:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002296:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800229a:	81a3      	strh	r3, [r4, #12]
 800229c:	4632      	mov	r2, r6
 800229e:	463b      	mov	r3, r7
 80022a0:	4628      	mov	r0, r5
 80022a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022a6:	f000 b817 	b.w	80022d8 <_write_r>

080022aa <__sseek>:
 80022aa:	b510      	push	{r4, lr}
 80022ac:	460c      	mov	r4, r1
 80022ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022b2:	f000 f855 	bl	8002360 <_lseek_r>
 80022b6:	1c43      	adds	r3, r0, #1
 80022b8:	89a3      	ldrh	r3, [r4, #12]
 80022ba:	bf15      	itete	ne
 80022bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80022be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80022c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80022c6:	81a3      	strheq	r3, [r4, #12]
 80022c8:	bf18      	it	ne
 80022ca:	81a3      	strhne	r3, [r4, #12]
 80022cc:	bd10      	pop	{r4, pc}

080022ce <__sclose>:
 80022ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022d2:	f000 b813 	b.w	80022fc <_close_r>
	...

080022d8 <_write_r>:
 80022d8:	b538      	push	{r3, r4, r5, lr}
 80022da:	4c07      	ldr	r4, [pc, #28]	; (80022f8 <_write_r+0x20>)
 80022dc:	4605      	mov	r5, r0
 80022de:	4608      	mov	r0, r1
 80022e0:	4611      	mov	r1, r2
 80022e2:	2200      	movs	r2, #0
 80022e4:	6022      	str	r2, [r4, #0]
 80022e6:	461a      	mov	r2, r3
 80022e8:	f000 f911 	bl	800250e <_write>
 80022ec:	1c43      	adds	r3, r0, #1
 80022ee:	d102      	bne.n	80022f6 <_write_r+0x1e>
 80022f0:	6823      	ldr	r3, [r4, #0]
 80022f2:	b103      	cbz	r3, 80022f6 <_write_r+0x1e>
 80022f4:	602b      	str	r3, [r5, #0]
 80022f6:	bd38      	pop	{r3, r4, r5, pc}
 80022f8:	20000588 	.word	0x20000588

080022fc <_close_r>:
 80022fc:	b538      	push	{r3, r4, r5, lr}
 80022fe:	4c06      	ldr	r4, [pc, #24]	; (8002318 <_close_r+0x1c>)
 8002300:	2300      	movs	r3, #0
 8002302:	4605      	mov	r5, r0
 8002304:	4608      	mov	r0, r1
 8002306:	6023      	str	r3, [r4, #0]
 8002308:	f000 f930 	bl	800256c <_close>
 800230c:	1c43      	adds	r3, r0, #1
 800230e:	d102      	bne.n	8002316 <_close_r+0x1a>
 8002310:	6823      	ldr	r3, [r4, #0]
 8002312:	b103      	cbz	r3, 8002316 <_close_r+0x1a>
 8002314:	602b      	str	r3, [r5, #0]
 8002316:	bd38      	pop	{r3, r4, r5, pc}
 8002318:	20000588 	.word	0x20000588

0800231c <_fstat_r>:
 800231c:	b538      	push	{r3, r4, r5, lr}
 800231e:	4c07      	ldr	r4, [pc, #28]	; (800233c <_fstat_r+0x20>)
 8002320:	2300      	movs	r3, #0
 8002322:	4605      	mov	r5, r0
 8002324:	4608      	mov	r0, r1
 8002326:	4611      	mov	r1, r2
 8002328:	6023      	str	r3, [r4, #0]
 800232a:	f000 f966 	bl	80025fa <_fstat>
 800232e:	1c43      	adds	r3, r0, #1
 8002330:	d102      	bne.n	8002338 <_fstat_r+0x1c>
 8002332:	6823      	ldr	r3, [r4, #0]
 8002334:	b103      	cbz	r3, 8002338 <_fstat_r+0x1c>
 8002336:	602b      	str	r3, [r5, #0]
 8002338:	bd38      	pop	{r3, r4, r5, pc}
 800233a:	bf00      	nop
 800233c:	20000588 	.word	0x20000588

08002340 <_isatty_r>:
 8002340:	b538      	push	{r3, r4, r5, lr}
 8002342:	4c06      	ldr	r4, [pc, #24]	; (800235c <_isatty_r+0x1c>)
 8002344:	2300      	movs	r3, #0
 8002346:	4605      	mov	r5, r0
 8002348:	4608      	mov	r0, r1
 800234a:	6023      	str	r3, [r4, #0]
 800234c:	f000 faba 	bl	80028c4 <_isatty>
 8002350:	1c43      	adds	r3, r0, #1
 8002352:	d102      	bne.n	800235a <_isatty_r+0x1a>
 8002354:	6823      	ldr	r3, [r4, #0]
 8002356:	b103      	cbz	r3, 800235a <_isatty_r+0x1a>
 8002358:	602b      	str	r3, [r5, #0]
 800235a:	bd38      	pop	{r3, r4, r5, pc}
 800235c:	20000588 	.word	0x20000588

08002360 <_lseek_r>:
 8002360:	b538      	push	{r3, r4, r5, lr}
 8002362:	4c07      	ldr	r4, [pc, #28]	; (8002380 <_lseek_r+0x20>)
 8002364:	4605      	mov	r5, r0
 8002366:	4608      	mov	r0, r1
 8002368:	4611      	mov	r1, r2
 800236a:	2200      	movs	r2, #0
 800236c:	6022      	str	r2, [r4, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	f000 f8bb 	bl	80024ea <_lseek>
 8002374:	1c43      	adds	r3, r0, #1
 8002376:	d102      	bne.n	800237e <_lseek_r+0x1e>
 8002378:	6823      	ldr	r3, [r4, #0]
 800237a:	b103      	cbz	r3, 800237e <_lseek_r+0x1e>
 800237c:	602b      	str	r3, [r5, #0]
 800237e:	bd38      	pop	{r3, r4, r5, pc}
 8002380:	20000588 	.word	0x20000588

08002384 <__malloc_lock>:
 8002384:	4770      	bx	lr

08002386 <__malloc_unlock>:
 8002386:	4770      	bx	lr

08002388 <_read_r>:
 8002388:	b538      	push	{r3, r4, r5, lr}
 800238a:	4c07      	ldr	r4, [pc, #28]	; (80023a8 <_read_r+0x20>)
 800238c:	4605      	mov	r5, r0
 800238e:	4608      	mov	r0, r1
 8002390:	4611      	mov	r1, r2
 8002392:	2200      	movs	r2, #0
 8002394:	6022      	str	r2, [r4, #0]
 8002396:	461a      	mov	r2, r3
 8002398:	f000 f850 	bl	800243c <_read>
 800239c:	1c43      	adds	r3, r0, #1
 800239e:	d102      	bne.n	80023a6 <_read_r+0x1e>
 80023a0:	6823      	ldr	r3, [r4, #0]
 80023a2:	b103      	cbz	r3, 80023a6 <_read_r+0x1e>
 80023a4:	602b      	str	r3, [r5, #0]
 80023a6:	bd38      	pop	{r3, r4, r5, pc}
 80023a8:	20000588 	.word	0x20000588

080023ac <findslot>:
 80023ac:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <findslot+0x2c>)
 80023ae:	b510      	push	{r4, lr}
 80023b0:	4604      	mov	r4, r0
 80023b2:	6818      	ldr	r0, [r3, #0]
 80023b4:	b118      	cbz	r0, 80023be <findslot+0x12>
 80023b6:	6983      	ldr	r3, [r0, #24]
 80023b8:	b90b      	cbnz	r3, 80023be <findslot+0x12>
 80023ba:	f7ff fadd 	bl	8001978 <__sinit>
 80023be:	2c13      	cmp	r4, #19
 80023c0:	d807      	bhi.n	80023d2 <findslot+0x26>
 80023c2:	4806      	ldr	r0, [pc, #24]	; (80023dc <findslot+0x30>)
 80023c4:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 80023c8:	3301      	adds	r3, #1
 80023ca:	d002      	beq.n	80023d2 <findslot+0x26>
 80023cc:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80023d0:	bd10      	pop	{r4, pc}
 80023d2:	2000      	movs	r0, #0
 80023d4:	e7fc      	b.n	80023d0 <findslot+0x24>
 80023d6:	bf00      	nop
 80023d8:	20000020 	.word	0x20000020
 80023dc:	200000c4 	.word	0x200000c4

080023e0 <checkerror>:
 80023e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023e2:	1c43      	adds	r3, r0, #1
 80023e4:	4605      	mov	r5, r0
 80023e6:	d109      	bne.n	80023fc <checkerror+0x1c>
 80023e8:	f7ff f868 	bl	80014bc <__errno>
 80023ec:	2413      	movs	r4, #19
 80023ee:	4606      	mov	r6, r0
 80023f0:	2700      	movs	r7, #0
 80023f2:	4620      	mov	r0, r4
 80023f4:	4639      	mov	r1, r7
 80023f6:	beab      	bkpt	0x00ab
 80023f8:	4604      	mov	r4, r0
 80023fa:	6034      	str	r4, [r6, #0]
 80023fc:	4628      	mov	r0, r5
 80023fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002400 <error>:
 8002400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002402:	4605      	mov	r5, r0
 8002404:	f7ff f85a 	bl	80014bc <__errno>
 8002408:	2413      	movs	r4, #19
 800240a:	4606      	mov	r6, r0
 800240c:	2700      	movs	r7, #0
 800240e:	4620      	mov	r0, r4
 8002410:	4639      	mov	r1, r7
 8002412:	beab      	bkpt	0x00ab
 8002414:	4604      	mov	r4, r0
 8002416:	6034      	str	r4, [r6, #0]
 8002418:	4628      	mov	r0, r5
 800241a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800241c <_swiread>:
 800241c:	b530      	push	{r4, r5, lr}
 800241e:	b085      	sub	sp, #20
 8002420:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002424:	9203      	str	r2, [sp, #12]
 8002426:	2406      	movs	r4, #6
 8002428:	ad01      	add	r5, sp, #4
 800242a:	4620      	mov	r0, r4
 800242c:	4629      	mov	r1, r5
 800242e:	beab      	bkpt	0x00ab
 8002430:	4604      	mov	r4, r0
 8002432:	4620      	mov	r0, r4
 8002434:	f7ff ffd4 	bl	80023e0 <checkerror>
 8002438:	b005      	add	sp, #20
 800243a:	bd30      	pop	{r4, r5, pc}

0800243c <_read>:
 800243c:	b570      	push	{r4, r5, r6, lr}
 800243e:	460e      	mov	r6, r1
 8002440:	4615      	mov	r5, r2
 8002442:	f7ff ffb3 	bl	80023ac <findslot>
 8002446:	4604      	mov	r4, r0
 8002448:	b930      	cbnz	r0, 8002458 <_read+0x1c>
 800244a:	f7ff f837 	bl	80014bc <__errno>
 800244e:	2309      	movs	r3, #9
 8002450:	6003      	str	r3, [r0, #0]
 8002452:	f04f 30ff 	mov.w	r0, #4294967295
 8002456:	bd70      	pop	{r4, r5, r6, pc}
 8002458:	462a      	mov	r2, r5
 800245a:	4631      	mov	r1, r6
 800245c:	6800      	ldr	r0, [r0, #0]
 800245e:	f7ff ffdd 	bl	800241c <_swiread>
 8002462:	1c43      	adds	r3, r0, #1
 8002464:	bf1f      	itttt	ne
 8002466:	6863      	ldrne	r3, [r4, #4]
 8002468:	1a28      	subne	r0, r5, r0
 800246a:	181b      	addne	r3, r3, r0
 800246c:	6063      	strne	r3, [r4, #4]
 800246e:	e7f2      	b.n	8002456 <_read+0x1a>

08002470 <_swilseek>:
 8002470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002472:	460c      	mov	r4, r1
 8002474:	4616      	mov	r6, r2
 8002476:	f7ff ff99 	bl	80023ac <findslot>
 800247a:	4605      	mov	r5, r0
 800247c:	b940      	cbnz	r0, 8002490 <_swilseek+0x20>
 800247e:	f7ff f81d 	bl	80014bc <__errno>
 8002482:	2309      	movs	r3, #9
 8002484:	6003      	str	r3, [r0, #0]
 8002486:	f04f 34ff 	mov.w	r4, #4294967295
 800248a:	4620      	mov	r0, r4
 800248c:	b003      	add	sp, #12
 800248e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002490:	2e02      	cmp	r6, #2
 8002492:	d903      	bls.n	800249c <_swilseek+0x2c>
 8002494:	f7ff f812 	bl	80014bc <__errno>
 8002498:	2316      	movs	r3, #22
 800249a:	e7f3      	b.n	8002484 <_swilseek+0x14>
 800249c:	2e01      	cmp	r6, #1
 800249e:	d112      	bne.n	80024c6 <_swilseek+0x56>
 80024a0:	6843      	ldr	r3, [r0, #4]
 80024a2:	18e4      	adds	r4, r4, r3
 80024a4:	d4f6      	bmi.n	8002494 <_swilseek+0x24>
 80024a6:	682b      	ldr	r3, [r5, #0]
 80024a8:	260a      	movs	r6, #10
 80024aa:	e9cd 3400 	strd	r3, r4, [sp]
 80024ae:	466f      	mov	r7, sp
 80024b0:	4630      	mov	r0, r6
 80024b2:	4639      	mov	r1, r7
 80024b4:	beab      	bkpt	0x00ab
 80024b6:	4606      	mov	r6, r0
 80024b8:	4630      	mov	r0, r6
 80024ba:	f7ff ff91 	bl	80023e0 <checkerror>
 80024be:	2800      	cmp	r0, #0
 80024c0:	dbe1      	blt.n	8002486 <_swilseek+0x16>
 80024c2:	606c      	str	r4, [r5, #4]
 80024c4:	e7e1      	b.n	800248a <_swilseek+0x1a>
 80024c6:	2e02      	cmp	r6, #2
 80024c8:	d1ed      	bne.n	80024a6 <_swilseek+0x36>
 80024ca:	af02      	add	r7, sp, #8
 80024cc:	6803      	ldr	r3, [r0, #0]
 80024ce:	f847 3d08 	str.w	r3, [r7, #-8]!
 80024d2:	260c      	movs	r6, #12
 80024d4:	4630      	mov	r0, r6
 80024d6:	4639      	mov	r1, r7
 80024d8:	beab      	bkpt	0x00ab
 80024da:	4606      	mov	r6, r0
 80024dc:	4630      	mov	r0, r6
 80024de:	f7ff ff7f 	bl	80023e0 <checkerror>
 80024e2:	1c43      	adds	r3, r0, #1
 80024e4:	d0cf      	beq.n	8002486 <_swilseek+0x16>
 80024e6:	4404      	add	r4, r0
 80024e8:	e7dd      	b.n	80024a6 <_swilseek+0x36>

080024ea <_lseek>:
 80024ea:	f7ff bfc1 	b.w	8002470 <_swilseek>

080024ee <_swiwrite>:
 80024ee:	b530      	push	{r4, r5, lr}
 80024f0:	b085      	sub	sp, #20
 80024f2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80024f6:	9203      	str	r2, [sp, #12]
 80024f8:	2405      	movs	r4, #5
 80024fa:	ad01      	add	r5, sp, #4
 80024fc:	4620      	mov	r0, r4
 80024fe:	4629      	mov	r1, r5
 8002500:	beab      	bkpt	0x00ab
 8002502:	4604      	mov	r4, r0
 8002504:	4620      	mov	r0, r4
 8002506:	f7ff ff6b 	bl	80023e0 <checkerror>
 800250a:	b005      	add	sp, #20
 800250c:	bd30      	pop	{r4, r5, pc}

0800250e <_write>:
 800250e:	b570      	push	{r4, r5, r6, lr}
 8002510:	460e      	mov	r6, r1
 8002512:	4615      	mov	r5, r2
 8002514:	f7ff ff4a 	bl	80023ac <findslot>
 8002518:	4604      	mov	r4, r0
 800251a:	b930      	cbnz	r0, 800252a <_write+0x1c>
 800251c:	f7fe ffce 	bl	80014bc <__errno>
 8002520:	2309      	movs	r3, #9
 8002522:	6003      	str	r3, [r0, #0]
 8002524:	f04f 30ff 	mov.w	r0, #4294967295
 8002528:	bd70      	pop	{r4, r5, r6, pc}
 800252a:	462a      	mov	r2, r5
 800252c:	4631      	mov	r1, r6
 800252e:	6800      	ldr	r0, [r0, #0]
 8002530:	f7ff ffdd 	bl	80024ee <_swiwrite>
 8002534:	1e02      	subs	r2, r0, #0
 8002536:	dbf5      	blt.n	8002524 <_write+0x16>
 8002538:	6863      	ldr	r3, [r4, #4]
 800253a:	1aa8      	subs	r0, r5, r2
 800253c:	4403      	add	r3, r0
 800253e:	42aa      	cmp	r2, r5
 8002540:	6063      	str	r3, [r4, #4]
 8002542:	d1f1      	bne.n	8002528 <_write+0x1a>
 8002544:	2000      	movs	r0, #0
 8002546:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800254a:	f7ff bf59 	b.w	8002400 <error>

0800254e <_swiclose>:
 800254e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002550:	ad02      	add	r5, sp, #8
 8002552:	2402      	movs	r4, #2
 8002554:	f845 0d04 	str.w	r0, [r5, #-4]!
 8002558:	4620      	mov	r0, r4
 800255a:	4629      	mov	r1, r5
 800255c:	beab      	bkpt	0x00ab
 800255e:	4604      	mov	r4, r0
 8002560:	4620      	mov	r0, r4
 8002562:	f7ff ff3d 	bl	80023e0 <checkerror>
 8002566:	b003      	add	sp, #12
 8002568:	bd30      	pop	{r4, r5, pc}
	...

0800256c <_close>:
 800256c:	b538      	push	{r3, r4, r5, lr}
 800256e:	4605      	mov	r5, r0
 8002570:	f7ff ff1c 	bl	80023ac <findslot>
 8002574:	4604      	mov	r4, r0
 8002576:	b930      	cbnz	r0, 8002586 <_close+0x1a>
 8002578:	f7fe ffa0 	bl	80014bc <__errno>
 800257c:	2309      	movs	r3, #9
 800257e:	6003      	str	r3, [r0, #0]
 8002580:	f04f 30ff 	mov.w	r0, #4294967295
 8002584:	bd38      	pop	{r3, r4, r5, pc}
 8002586:	3d01      	subs	r5, #1
 8002588:	2d01      	cmp	r5, #1
 800258a:	d809      	bhi.n	80025a0 <_close+0x34>
 800258c:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <_close+0x48>)
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	429a      	cmp	r2, r3
 8002594:	d104      	bne.n	80025a0 <_close+0x34>
 8002596:	f04f 33ff 	mov.w	r3, #4294967295
 800259a:	6003      	str	r3, [r0, #0]
 800259c:	2000      	movs	r0, #0
 800259e:	e7f1      	b.n	8002584 <_close+0x18>
 80025a0:	6820      	ldr	r0, [r4, #0]
 80025a2:	f7ff ffd4 	bl	800254e <_swiclose>
 80025a6:	2800      	cmp	r0, #0
 80025a8:	d1ec      	bne.n	8002584 <_close+0x18>
 80025aa:	f04f 33ff 	mov.w	r3, #4294967295
 80025ae:	6023      	str	r3, [r4, #0]
 80025b0:	e7e8      	b.n	8002584 <_close+0x18>
 80025b2:	bf00      	nop
 80025b4:	200000c4 	.word	0x200000c4

080025b8 <_swistat>:
 80025b8:	b570      	push	{r4, r5, r6, lr}
 80025ba:	460c      	mov	r4, r1
 80025bc:	f7ff fef6 	bl	80023ac <findslot>
 80025c0:	4606      	mov	r6, r0
 80025c2:	b930      	cbnz	r0, 80025d2 <_swistat+0x1a>
 80025c4:	f7fe ff7a 	bl	80014bc <__errno>
 80025c8:	2309      	movs	r3, #9
 80025ca:	6003      	str	r3, [r0, #0]
 80025cc:	f04f 30ff 	mov.w	r0, #4294967295
 80025d0:	bd70      	pop	{r4, r5, r6, pc}
 80025d2:	6863      	ldr	r3, [r4, #4]
 80025d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025d8:	6063      	str	r3, [r4, #4]
 80025da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025de:	6463      	str	r3, [r4, #68]	; 0x44
 80025e0:	250c      	movs	r5, #12
 80025e2:	4628      	mov	r0, r5
 80025e4:	4631      	mov	r1, r6
 80025e6:	beab      	bkpt	0x00ab
 80025e8:	4605      	mov	r5, r0
 80025ea:	4628      	mov	r0, r5
 80025ec:	f7ff fef8 	bl	80023e0 <checkerror>
 80025f0:	1c43      	adds	r3, r0, #1
 80025f2:	bf1c      	itt	ne
 80025f4:	6120      	strne	r0, [r4, #16]
 80025f6:	2000      	movne	r0, #0
 80025f8:	e7ea      	b.n	80025d0 <_swistat+0x18>

080025fa <_fstat>:
 80025fa:	460b      	mov	r3, r1
 80025fc:	b510      	push	{r4, lr}
 80025fe:	2100      	movs	r1, #0
 8002600:	4604      	mov	r4, r0
 8002602:	2258      	movs	r2, #88	; 0x58
 8002604:	4618      	mov	r0, r3
 8002606:	f7fe ff83 	bl	8001510 <memset>
 800260a:	4601      	mov	r1, r0
 800260c:	4620      	mov	r0, r4
 800260e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002612:	f7ff bfd1 	b.w	80025b8 <_swistat>

08002616 <_stat>:
 8002616:	b538      	push	{r3, r4, r5, lr}
 8002618:	460d      	mov	r5, r1
 800261a:	4604      	mov	r4, r0
 800261c:	2258      	movs	r2, #88	; 0x58
 800261e:	2100      	movs	r1, #0
 8002620:	4628      	mov	r0, r5
 8002622:	f7fe ff75 	bl	8001510 <memset>
 8002626:	4620      	mov	r0, r4
 8002628:	2100      	movs	r1, #0
 800262a:	f000 f811 	bl	8002650 <_swiopen>
 800262e:	1c43      	adds	r3, r0, #1
 8002630:	4604      	mov	r4, r0
 8002632:	d00b      	beq.n	800264c <_stat+0x36>
 8002634:	686b      	ldr	r3, [r5, #4]
 8002636:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800263a:	606b      	str	r3, [r5, #4]
 800263c:	4629      	mov	r1, r5
 800263e:	f7ff ffbb 	bl	80025b8 <_swistat>
 8002642:	4605      	mov	r5, r0
 8002644:	4620      	mov	r0, r4
 8002646:	f7ff ff91 	bl	800256c <_close>
 800264a:	462c      	mov	r4, r5
 800264c:	4620      	mov	r0, r4
 800264e:	bd38      	pop	{r3, r4, r5, pc}

08002650 <_swiopen>:
 8002650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002654:	4b2b      	ldr	r3, [pc, #172]	; (8002704 <_swiopen+0xb4>)
 8002656:	b096      	sub	sp, #88	; 0x58
 8002658:	4682      	mov	sl, r0
 800265a:	460e      	mov	r6, r1
 800265c:	2500      	movs	r5, #0
 800265e:	4698      	mov	r8, r3
 8002660:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8002664:	1c61      	adds	r1, r4, #1
 8002666:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 800266a:	d036      	beq.n	80026da <_swiopen+0x8a>
 800266c:	3501      	adds	r5, #1
 800266e:	2d14      	cmp	r5, #20
 8002670:	d1f6      	bne.n	8002660 <_swiopen+0x10>
 8002672:	f7fe ff23 	bl	80014bc <__errno>
 8002676:	2318      	movs	r3, #24
 8002678:	6003      	str	r3, [r0, #0]
 800267a:	f04f 34ff 	mov.w	r4, #4294967295
 800267e:	e03c      	b.n	80026fa <_swiopen+0xaa>
 8002680:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8002684:	f240 6301 	movw	r3, #1537	; 0x601
 8002688:	07b2      	lsls	r2, r6, #30
 800268a:	bf48      	it	mi
 800268c:	f044 0402 	orrmi.w	r4, r4, #2
 8002690:	421e      	tst	r6, r3
 8002692:	bf18      	it	ne
 8002694:	f044 0404 	orrne.w	r4, r4, #4
 8002698:	0733      	lsls	r3, r6, #28
 800269a:	bf48      	it	mi
 800269c:	f024 0404 	bicmi.w	r4, r4, #4
 80026a0:	4650      	mov	r0, sl
 80026a2:	bf48      	it	mi
 80026a4:	f044 0408 	orrmi.w	r4, r4, #8
 80026a8:	f8cd a000 	str.w	sl, [sp]
 80026ac:	f7fd fda0 	bl	80001f0 <strlen>
 80026b0:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80026b4:	2401      	movs	r4, #1
 80026b6:	4620      	mov	r0, r4
 80026b8:	4649      	mov	r1, r9
 80026ba:	beab      	bkpt	0x00ab
 80026bc:	4604      	mov	r4, r0
 80026be:	2c00      	cmp	r4, #0
 80026c0:	db06      	blt.n	80026d0 <_swiopen+0x80>
 80026c2:	4447      	add	r7, r8
 80026c4:	2300      	movs	r3, #0
 80026c6:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 80026ca:	607b      	str	r3, [r7, #4]
 80026cc:	462c      	mov	r4, r5
 80026ce:	e014      	b.n	80026fa <_swiopen+0xaa>
 80026d0:	4620      	mov	r0, r4
 80026d2:	f7ff fe95 	bl	8002400 <error>
 80026d6:	4604      	mov	r4, r0
 80026d8:	e00f      	b.n	80026fa <_swiopen+0xaa>
 80026da:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 80026de:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80026e2:	46e9      	mov	r9, sp
 80026e4:	d1cc      	bne.n	8002680 <_swiopen+0x30>
 80026e6:	4649      	mov	r1, r9
 80026e8:	4650      	mov	r0, sl
 80026ea:	f7ff ff94 	bl	8002616 <_stat>
 80026ee:	3001      	adds	r0, #1
 80026f0:	d0c6      	beq.n	8002680 <_swiopen+0x30>
 80026f2:	f7fe fee3 	bl	80014bc <__errno>
 80026f6:	2311      	movs	r3, #17
 80026f8:	6003      	str	r3, [r0, #0]
 80026fa:	4620      	mov	r0, r4
 80026fc:	b016      	add	sp, #88	; 0x58
 80026fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002702:	bf00      	nop
 8002704:	200000c4 	.word	0x200000c4

08002708 <_get_semihosting_exts>:
 8002708:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800270c:	4607      	mov	r7, r0
 800270e:	4688      	mov	r8, r1
 8002710:	4829      	ldr	r0, [pc, #164]	; (80027b8 <_get_semihosting_exts+0xb0>)
 8002712:	2100      	movs	r1, #0
 8002714:	4615      	mov	r5, r2
 8002716:	f7ff ff9b 	bl	8002650 <_swiopen>
 800271a:	462a      	mov	r2, r5
 800271c:	4604      	mov	r4, r0
 800271e:	2100      	movs	r1, #0
 8002720:	4638      	mov	r0, r7
 8002722:	f7fe fef5 	bl	8001510 <memset>
 8002726:	1c63      	adds	r3, r4, #1
 8002728:	d015      	beq.n	8002756 <_get_semihosting_exts+0x4e>
 800272a:	4620      	mov	r0, r4
 800272c:	f7ff fe3e 	bl	80023ac <findslot>
 8002730:	260c      	movs	r6, #12
 8002732:	4681      	mov	r9, r0
 8002734:	4630      	mov	r0, r6
 8002736:	4649      	mov	r1, r9
 8002738:	beab      	bkpt	0x00ab
 800273a:	4606      	mov	r6, r0
 800273c:	4630      	mov	r0, r6
 800273e:	f7ff fe4f 	bl	80023e0 <checkerror>
 8002742:	2803      	cmp	r0, #3
 8002744:	dd02      	ble.n	800274c <_get_semihosting_exts+0x44>
 8002746:	3803      	subs	r0, #3
 8002748:	42a8      	cmp	r0, r5
 800274a:	dc08      	bgt.n	800275e <_get_semihosting_exts+0x56>
 800274c:	4620      	mov	r0, r4
 800274e:	f7ff ff0d 	bl	800256c <_close>
 8002752:	f04f 34ff 	mov.w	r4, #4294967295
 8002756:	4620      	mov	r0, r4
 8002758:	b003      	add	sp, #12
 800275a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800275e:	2204      	movs	r2, #4
 8002760:	eb0d 0102 	add.w	r1, sp, r2
 8002764:	4620      	mov	r0, r4
 8002766:	f7ff fe69 	bl	800243c <_read>
 800276a:	2803      	cmp	r0, #3
 800276c:	ddee      	ble.n	800274c <_get_semihosting_exts+0x44>
 800276e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002772:	2b53      	cmp	r3, #83	; 0x53
 8002774:	d1ea      	bne.n	800274c <_get_semihosting_exts+0x44>
 8002776:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800277a:	2b48      	cmp	r3, #72	; 0x48
 800277c:	d1e6      	bne.n	800274c <_get_semihosting_exts+0x44>
 800277e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002782:	2b46      	cmp	r3, #70	; 0x46
 8002784:	d1e2      	bne.n	800274c <_get_semihosting_exts+0x44>
 8002786:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800278a:	2b42      	cmp	r3, #66	; 0x42
 800278c:	d1de      	bne.n	800274c <_get_semihosting_exts+0x44>
 800278e:	2201      	movs	r2, #1
 8002790:	4641      	mov	r1, r8
 8002792:	4620      	mov	r0, r4
 8002794:	f7ff fe6c 	bl	8002470 <_swilseek>
 8002798:	2800      	cmp	r0, #0
 800279a:	dbd7      	blt.n	800274c <_get_semihosting_exts+0x44>
 800279c:	462a      	mov	r2, r5
 800279e:	4639      	mov	r1, r7
 80027a0:	4620      	mov	r0, r4
 80027a2:	f7ff fe4b 	bl	800243c <_read>
 80027a6:	4605      	mov	r5, r0
 80027a8:	4620      	mov	r0, r4
 80027aa:	f7ff fedf 	bl	800256c <_close>
 80027ae:	4628      	mov	r0, r5
 80027b0:	f7ff fe16 	bl	80023e0 <checkerror>
 80027b4:	4604      	mov	r4, r0
 80027b6:	e7ce      	b.n	8002756 <_get_semihosting_exts+0x4e>
 80027b8:	08002a23 	.word	0x08002a23

080027bc <initialise_semihosting_exts>:
 80027bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80027be:	4d0a      	ldr	r5, [pc, #40]	; (80027e8 <initialise_semihosting_exts+0x2c>)
 80027c0:	4c0a      	ldr	r4, [pc, #40]	; (80027ec <initialise_semihosting_exts+0x30>)
 80027c2:	2100      	movs	r1, #0
 80027c4:	2201      	movs	r2, #1
 80027c6:	a801      	add	r0, sp, #4
 80027c8:	6029      	str	r1, [r5, #0]
 80027ca:	6022      	str	r2, [r4, #0]
 80027cc:	f7ff ff9c 	bl	8002708 <_get_semihosting_exts>
 80027d0:	2800      	cmp	r0, #0
 80027d2:	dd07      	ble.n	80027e4 <initialise_semihosting_exts+0x28>
 80027d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80027d8:	f003 0201 	and.w	r2, r3, #1
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	602a      	str	r2, [r5, #0]
 80027e2:	6023      	str	r3, [r4, #0]
 80027e4:	b003      	add	sp, #12
 80027e6:	bd30      	pop	{r4, r5, pc}
 80027e8:	20000084 	.word	0x20000084
 80027ec:	20000088 	.word	0x20000088

080027f0 <_has_ext_stdout_stderr>:
 80027f0:	b510      	push	{r4, lr}
 80027f2:	4c04      	ldr	r4, [pc, #16]	; (8002804 <_has_ext_stdout_stderr+0x14>)
 80027f4:	6822      	ldr	r2, [r4, #0]
 80027f6:	2a00      	cmp	r2, #0
 80027f8:	da01      	bge.n	80027fe <_has_ext_stdout_stderr+0xe>
 80027fa:	f7ff ffdf 	bl	80027bc <initialise_semihosting_exts>
 80027fe:	6820      	ldr	r0, [r4, #0]
 8002800:	bd10      	pop	{r4, pc}
 8002802:	bf00      	nop
 8002804:	20000088 	.word	0x20000088

08002808 <initialise_monitor_handles>:
 8002808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800280c:	b085      	sub	sp, #20
 800280e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80028c0 <initialise_monitor_handles+0xb8>
 8002812:	f8cd 9004 	str.w	r9, [sp, #4]
 8002816:	2303      	movs	r3, #3
 8002818:	2400      	movs	r4, #0
 800281a:	9303      	str	r3, [sp, #12]
 800281c:	f10d 0804 	add.w	r8, sp, #4
 8002820:	9402      	str	r4, [sp, #8]
 8002822:	2501      	movs	r5, #1
 8002824:	4628      	mov	r0, r5
 8002826:	4641      	mov	r1, r8
 8002828:	beab      	bkpt	0x00ab
 800282a:	4605      	mov	r5, r0
 800282c:	4e20      	ldr	r6, [pc, #128]	; (80028b0 <initialise_monitor_handles+0xa8>)
 800282e:	4a21      	ldr	r2, [pc, #132]	; (80028b4 <initialise_monitor_handles+0xac>)
 8002830:	6035      	str	r5, [r6, #0]
 8002832:	4623      	mov	r3, r4
 8002834:	f04f 31ff 	mov.w	r1, #4294967295
 8002838:	4614      	mov	r4, r2
 800283a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 800283e:	3301      	adds	r3, #1
 8002840:	2b14      	cmp	r3, #20
 8002842:	d1fa      	bne.n	800283a <initialise_monitor_handles+0x32>
 8002844:	f7ff ffd4 	bl	80027f0 <_has_ext_stdout_stderr>
 8002848:	4d1b      	ldr	r5, [pc, #108]	; (80028b8 <initialise_monitor_handles+0xb0>)
 800284a:	b1d0      	cbz	r0, 8002882 <initialise_monitor_handles+0x7a>
 800284c:	f04f 0a03 	mov.w	sl, #3
 8002850:	2304      	movs	r3, #4
 8002852:	f8cd 9004 	str.w	r9, [sp, #4]
 8002856:	2701      	movs	r7, #1
 8002858:	f8cd a00c 	str.w	sl, [sp, #12]
 800285c:	9302      	str	r3, [sp, #8]
 800285e:	4638      	mov	r0, r7
 8002860:	4641      	mov	r1, r8
 8002862:	beab      	bkpt	0x00ab
 8002864:	4683      	mov	fp, r0
 8002866:	4b15      	ldr	r3, [pc, #84]	; (80028bc <initialise_monitor_handles+0xb4>)
 8002868:	f8cd 9004 	str.w	r9, [sp, #4]
 800286c:	f8c3 b000 	str.w	fp, [r3]
 8002870:	2308      	movs	r3, #8
 8002872:	f8cd a00c 	str.w	sl, [sp, #12]
 8002876:	9302      	str	r3, [sp, #8]
 8002878:	4638      	mov	r0, r7
 800287a:	4641      	mov	r1, r8
 800287c:	beab      	bkpt	0x00ab
 800287e:	4607      	mov	r7, r0
 8002880:	602f      	str	r7, [r5, #0]
 8002882:	682b      	ldr	r3, [r5, #0]
 8002884:	3301      	adds	r3, #1
 8002886:	bf02      	ittt	eq
 8002888:	4b0c      	ldreq	r3, [pc, #48]	; (80028bc <initialise_monitor_handles+0xb4>)
 800288a:	681b      	ldreq	r3, [r3, #0]
 800288c:	602b      	streq	r3, [r5, #0]
 800288e:	6833      	ldr	r3, [r6, #0]
 8002890:	6023      	str	r3, [r4, #0]
 8002892:	2600      	movs	r6, #0
 8002894:	6066      	str	r6, [r4, #4]
 8002896:	f7ff ffab 	bl	80027f0 <_has_ext_stdout_stderr>
 800289a:	b130      	cbz	r0, 80028aa <initialise_monitor_handles+0xa2>
 800289c:	4b07      	ldr	r3, [pc, #28]	; (80028bc <initialise_monitor_handles+0xb4>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80028a4:	682b      	ldr	r3, [r5, #0]
 80028a6:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80028aa:	b005      	add	sp, #20
 80028ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028b0:	200000bc 	.word	0x200000bc
 80028b4:	200000c4 	.word	0x200000c4
 80028b8:	200000b8 	.word	0x200000b8
 80028bc:	200000c0 	.word	0x200000c0
 80028c0:	08002a39 	.word	0x08002a39

080028c4 <_isatty>:
 80028c4:	b570      	push	{r4, r5, r6, lr}
 80028c6:	f7ff fd71 	bl	80023ac <findslot>
 80028ca:	2509      	movs	r5, #9
 80028cc:	4604      	mov	r4, r0
 80028ce:	b920      	cbnz	r0, 80028da <_isatty+0x16>
 80028d0:	f7fe fdf4 	bl	80014bc <__errno>
 80028d4:	6005      	str	r5, [r0, #0]
 80028d6:	4620      	mov	r0, r4
 80028d8:	bd70      	pop	{r4, r5, r6, pc}
 80028da:	4628      	mov	r0, r5
 80028dc:	4621      	mov	r1, r4
 80028de:	beab      	bkpt	0x00ab
 80028e0:	4604      	mov	r4, r0
 80028e2:	2c01      	cmp	r4, #1
 80028e4:	d0f7      	beq.n	80028d6 <_isatty+0x12>
 80028e6:	f7fe fde9 	bl	80014bc <__errno>
 80028ea:	2400      	movs	r4, #0
 80028ec:	4606      	mov	r6, r0
 80028ee:	2513      	movs	r5, #19
 80028f0:	4628      	mov	r0, r5
 80028f2:	4621      	mov	r1, r4
 80028f4:	beab      	bkpt	0x00ab
 80028f6:	4605      	mov	r5, r0
 80028f8:	6035      	str	r5, [r6, #0]
 80028fa:	e7ec      	b.n	80028d6 <_isatty+0x12>

080028fc <_init>:
 80028fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fe:	bf00      	nop
 8002900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002902:	bc08      	pop	{r3}
 8002904:	469e      	mov	lr, r3
 8002906:	4770      	bx	lr

08002908 <_fini>:
 8002908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800290a:	bf00      	nop
 800290c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800290e:	bc08      	pop	{r3}
 8002910:	469e      	mov	lr, r3
 8002912:	4770      	bx	lr
